Coverage Report by instance with details

=================================================================================
=== Instance: /DUT/core/rx_ctrl/synch_status_cnt_drop
=== Design Unit: work.cfs_synch
=================================================================================
Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       2         2         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/rx_ctrl/synch_status_cnt_drop --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch.v
    12                                                 module cfs_synch#(
    13                                                   parameter DATA_WIDTH = 32
    14                                                 ) (
    15                                                   input                       clk,
    16                                                   input     [DATA_WIDTH-1:0]  i,
    17                                                   output reg[DATA_WIDTH-1:0]  o
    18                                                 );
    19                                               
    20              1                       4613         always@(posedge clk) begin
    21              1                       4613           o <= i;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         34        34         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/rx_ctrl/synch_status_cnt_drop --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                            i[0-7]           2           2      100.00 
                                            o[0-7]           2           2      100.00 

Total Node Count     =         17 
Toggled Node Count   =         17 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (34 of 34 bins)

=================================================================================
=== Instance: /DUT/core/rx_ctrl
=== Design Unit: work.cfs_rx_ctrl
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        11        10         1    90.90%

================================Branch Details================================

Branch Coverage for instance /DUT/core/rx_ctrl

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_rx_ctrl.v
------------------------------------IF Branch------------------------------------
    71                                     22207     Count coming in to IF
    71              1                        134           if(!preset_n | clr_cnt_dop) begin
    74              1                      22073           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    75                                     22073     Count coming in to IF
    75              1                       7379             if(md_rx_valid & md_rx_ready & md_rx_err) begin
                                           14694     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    76                                      7379     Count coming in to IF
    76              1                       2295               if(md_rx_clk_status_cnt_drop < (('h1 << STATUS_CNT_DROP_WIDTH) - 1)) begin
                                            5084     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    84                                     22006     Count coming in to IF
    84              1                      11000           if(md_rx_valid == 1) begin
    95              1                      11006           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    85                                     11000     Count coming in to IF
    85              1                    ***0***             if(md_rx_size == 0) begin
    88              1                       7379             else if((((ALGN_DATA_WIDTH / 8) + md_rx_offset) % md_rx_size) != 0) begin
    91              1                       3621             else begin
Branch totals: 2 hits of 3 branches = 66.66%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       8         5         3    62.50%

================================Condition Details================================

Condition Coverage for instance /DUT/core/rx_ctrl --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_rx_ctrl.v
----------------Focused Condition View-------------------
Line       71 Item    1  (~preset_n | clr_cnt_dop)
Condition totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
     preset_n         Y
  clr_cnt_dop         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  preset_n_0            ~clr_cnt_dop                  
  Row   2:          3  preset_n_1            ~clr_cnt_dop                  
  Row   3:          3  clr_cnt_dop_0         preset_n                      
  Row   4:          3  clr_cnt_dop_1         preset_n                      

----------------Focused Condition View-------------------
Line       75 Item    1  ((md_rx_valid & md_rx_ready) & md_rx_err)
Condition totals: 1 of 3 input terms covered = 33.33%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  md_rx_valid         N  '_0' not hit             Hit '_0'
  md_rx_ready         N  '_0' not hit             Hit '_0'
    md_rx_err         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  md_rx_valid_0         (md_rx_err && md_rx_ready)    
  Row   2:          2  md_rx_valid_1         (md_rx_err && md_rx_ready)    
  Row   3:    ***0***  md_rx_ready_0         (md_rx_err && md_rx_valid)    
  Row   4:          2  md_rx_ready_1         (md_rx_err && md_rx_valid)    
  Row   5:          1  md_rx_err_0           (md_rx_valid & md_rx_ready)   
  Row   6:          2  md_rx_err_1           (md_rx_valid & md_rx_ready)   

----------------Focused Condition View-------------------
Line       76 Item    1  (md_rx_clk_status_cnt_drop < ((1 << 8) - 1))
Condition totals: 1 of 1 input term covered = 100.00%

                                    Input Term   Covered  Reason for no coverage   Hint
                                   -----------  --------  -----------------------  --------------
  (md_rx_clk_status_cnt_drop < ((1 << 8) - 1))         Y

     Rows:       Hits  FEC Target                                      Non-masking condition(s)      
 ---------  ---------  --------------------                            -------------------------     
  Row   1:          2  (md_rx_clk_status_cnt_drop < ((1 << 8) - 1))_0  -                             
  Row   2:          2  (md_rx_clk_status_cnt_drop < ((1 << 8) - 1))_1  -                             

----------------Focused Condition View-------------------
Line       85 Item    1  (md_rx_size == 0)
Condition totals: 0 of 1 input term covered = 0.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  (md_rx_size == 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          2  (md_rx_size == 0)_0   -                             
  Row   2:    ***0***  (md_rx_size == 0)_1   -                             

----------------Focused Condition View-------------------
Line       88 Item    1  ((((32 / 8) + md_rx_offset) % md_rx_size) != 0)
Condition totals: 1 of 1 input term covered = 100.00%

                                       Input Term   Covered  Reason for no coverage   Hint
                                      -----------  --------  -----------------------  --------------
  ((((32 / 8) + md_rx_offset) % md_rx_size) != 0)         Y

     Rows:       Hits  FEC Target                                         Non-masking condition(s)      
 ---------  ---------  --------------------                               -------------------------     
  Row   1:          1  ((((32 / 8) + md_rx_offset) % md_rx_size) != 0)_0  -                             
  Row   2:          2  ((((32 / 8) + md_rx_offset) % md_rx_size) != 0)_1  -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      5         5         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/rx_ctrl --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_rx_ctrl.v
----------------Focused Expression View-----------------
Line       100 Item    1  ((push_valid & push_ready) | md_rx_err)
Expression totals: 3 of 3 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         Y
  push_ready         Y
   md_rx_err         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  push_valid_0          (~md_rx_err && push_ready)    
  Row   2:          2  push_valid_1          (~md_rx_err && push_ready)    
  Row   3:          2  push_ready_0          (~md_rx_err && push_valid)    
  Row   4:          2  push_ready_1          (~md_rx_err && push_valid)    
  Row   5:          3  md_rx_err_0           ~(push_valid & push_ready)    
  Row   6:          2  md_rx_err_1           ~(push_valid & push_ready)    

----------------Focused Expression View-----------------
Line       102 Item    1  (md_rx_valid & ~md_rx_err)
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
  md_rx_valid         Y
    md_rx_err         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  md_rx_valid_0         ~md_rx_err                    
  Row   2:          2  md_rx_valid_1         ~md_rx_err                    
  Row   3:          2  md_rx_err_0           md_rx_valid                   
  Row   4:          2  md_rx_err_1           md_rx_valid                   


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      10         9         1    90.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/rx_ctrl --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_rx_ctrl.v
    21                                                 module cfs_rx_ctrl #(
    22                                                   parameter ALGN_DATA_WIDTH       = 32,
    23                                                   parameter STATUS_CNT_DROP_WIDTH = 8,
    24                                               
    25                                                   localparam int unsigned ALGN_OFFSET_WIDTH = ALGN_DATA_WIDTH <= 8 ? 1 : $clog2(ALGN_DATA_WIDTH/8),
    26                                                   localparam int unsigned ALGN_SIZE_WIDTH   = $clog2(ALGN_DATA_WIDTH/8)+1,
    27                                                   localparam int unsigned FIFO_DATA_WIDTH   = ALGN_DATA_WIDTH + ALGN_OFFSET_WIDTH + ALGN_SIZE_WIDTH
    28                                                 )(
    29                                                   input                                  preset_n,
    30                                                   input                                  pclk,
    31                                               
    32                                                   input                                  clr_cnt_dop,
    33                                               
    34                                                   output wire[STATUS_CNT_DROP_WIDTH-1:0] status_cnt_drop,
    35                                               
    36                                                   input                                  md_rx_clk,
    37                                                   input                                  md_rx_valid,
    38                                                   input[ALGN_DATA_WIDTH-1:0]             md_rx_data,
    39                                                   input[ALGN_OFFSET_WIDTH-1:0]           md_rx_offset,
    40                                                   input[ALGN_SIZE_WIDTH-1:0]             md_rx_size,
    41                                                   output wire                            md_rx_ready,
    42                                                   output reg                             md_rx_err,
    43                                               
    44                                                   output wire                            push_valid,
    45                                                   output wire[FIFO_DATA_WIDTH-1:0]       push_data,
    46                                                   input                                  push_ready,
    47                                               
    48                                                   input                                  rx_fifo_full
    49                                                   );
    50                                               
    51                                                   localparam int unsigned DATA_MSB = ALGN_DATA_WIDTH-1;
    52                                                   localparam int unsigned DATA_LSB = 0;
    53                                                   
    54                                                   localparam int unsigned OFFSET_MSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH-1;
    55                                                   localparam int unsigned OFFSET_LSB = ALGN_DATA_WIDTH;
    56                                                   
    57                                                   localparam int unsigned SIZE_MSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH+ALGN_SIZE_WIDTH-1;
    58                                                   localparam int unsigned SIZE_LSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH;
    59                                                   
    60                                                   //STATUS.CNT_DROP in the md_rx_clk domain
    61                                                   reg[STATUS_CNT_DROP_WIDTH-1:0] md_rx_clk_status_cnt_drop;
    62                                               
    63                                                   //Synchronizer to move the STATUS.CNT_DROP information from md_rx_clk clock domain to pclk clock domain
    64                                                   cfs_synch#(STATUS_CNT_DROP_WIDTH) synch_status_cnt_drop(
    65                                                     .clk(pclk),
    66                                                     .i  (md_rx_clk_status_cnt_drop),
    67                                                     .o  (status_cnt_drop)
    68                                                   );
    69                                               
    70              1                      22207         always@(posedge md_rx_clk or negedge preset_n or posedge clr_cnt_dop) begin
    71                                                     if(!preset_n | clr_cnt_dop) begin
    72              1                        134             md_rx_clk_status_cnt_drop <= 0;
    73                                                     end
    74                                                     else begin
    75                                                       if(md_rx_valid & md_rx_ready & md_rx_err) begin
    76                                                         if(md_rx_clk_status_cnt_drop < (('h1 << STATUS_CNT_DROP_WIDTH) - 1)) begin
    77              1                       2295                 md_rx_clk_status_cnt_drop <= md_rx_clk_status_cnt_drop + 1;
    78                                                         end
    79                                                       end
    80                                                     end
    81                                                   end
    82                                               
    83              1                      22006         always_comb begin
    84                                                     if(md_rx_valid == 1) begin
    85                                                       if(md_rx_size == 0) begin
    86              1                    ***0***               md_rx_err = 1;
    87                                                       end
    88                                                       else if((((ALGN_DATA_WIDTH / 8) + md_rx_offset) % md_rx_size) != 0) begin
    89              1                       7379               md_rx_err = 1;
    90                                                       end
    91                                                       else begin
    92              1                       3621               md_rx_err = 0;
    93                                                       end
    94                                                     end
    95                                                     else begin
    96              1                      11006             md_rx_err = 0;
    97                                                     end
    98                                                   end
    99                                               
    100             1                      58770         assign md_rx_ready = (push_valid & push_ready) | md_rx_err;
    101                                              
    102             1                      36764         assign push_valid = md_rx_valid & !md_rx_err;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        200       198         2    99.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/rx_ctrl --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                       clr_cnt_dop           3           3      100.00 
                                         md_rx_clk           3           3      100.00 
                    md_rx_clk_status_cnt_drop[0-7]           2           2      100.00 
                                  md_rx_data[0-31]           2           2      100.00 
                                         md_rx_err           2           2      100.00 
                                   md_rx_offset[0]           2           2      100.00 
                                   md_rx_offset[1]           1           1      100.00 
                                       md_rx_ready           2           2      100.00 
                                   md_rx_size[0-1]           2           2      100.00 
                                     md_rx_size[2]           1           1      100.00 
                                       md_rx_valid           2           2      100.00 
                                              pclk           3           3      100.00 
                                          preset_n           3           3      100.00 
                                   push_data[0-32]           2           2      100.00 
                                     push_data[33]           1           1      100.00 
                                  push_data[34-35]           2           2      100.00 
                                     push_data[36]           1           1      100.00 
                                        push_ready           1           1      100.00 
                                        push_valid           1           1      100.00 
                                      rx_fifo_full           0           0        0.00 
                              status_cnt_drop[0-7]           2           2      100.00 

Total Node Count     =        100 
Toggled Node Count   =         99 
Untoggled Node Count =          1 

Toggle Coverage      =      99.00% (198 of 200 bins)

=================================================================================
=== Instance: /DUT/core/rx_fifo
=== Design Unit: work.cfs_synch_fifo
=================================================================================

Assertion Coverage:
    Assertions                       2         2         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/DUT/core/rx_fifo/#ublk#72574239#54/immed__59
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(59)
                                                        0          3
/DUT/core/rx_fifo/#ublk#72574239#54/immed__55
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(55)
                                                        0          3
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        26        24         2    92.30%

================================Branch Details================================

Branch Coverage for instance /DUT/core/rx_fifo

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
------------------------------------IF Branch------------------------------------
    94                                      3627     Count coming in to IF
    94              1                        452           if(wr_ptr_push == FIFO_DEPTH - 1) begin
    97              1                       3175           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                    10904     Count coming in to IF
    103             1                          6           if(reset_n == 0) begin
    106             1                      10898           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    112                                    10904     Count coming in to IF
    112             1                          6           if(reset_n == 0) begin
    115             1                      10898           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    124                                    22012     Count coming in to IF
    124             1                          6           if(reset_n == 0) begin
    127             1                      22006           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    128                                    22006     Count coming in to IF
    128             1                       3621             if(push_valid & push_ready) begin
                                           18385     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    138                                     3627     Count coming in to IF
    138             1                        452           if(rd_ptr_pop == FIFO_DEPTH - 1) begin
    141             1                       3175           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    150                                     8482     Count coming in to IF
    150             1                          6           if(reset_n == 0) begin
    153             1                       8476           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    154                                     8476     Count coming in to IF
    154             1                       3621             if(pop_valid & pop_ready) begin
                                            4855     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    161                                    10912     Count coming in to IF
    161             1                       7111           if(wr_ptr_push == rd_ptr_push) begin
    169             1                       3288           else if(wr_ptr_push > rd_ptr_push) begin
    172             1                        513           else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    162                                     7111     Count coming in to IF
    162             1                    ***0***             if(push_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    165             1                       7111             else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    178                                    10912     Count coming in to IF
    178             1                       7111           if(wr_ptr_pop == rd_ptr_pop) begin
    186             1                       3288           else if(wr_ptr_pop > rd_ptr_pop) begin
    189             1                        513           else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    179                                     7111     Count coming in to IF
    179             1                    ***0***             if(pop_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    182             1                       7111             else begin
Branch totals: 1 hit of 2 branches = 50.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      12         8         4    66.66%

================================Condition Details================================

Condition Coverage for instance /DUT/core/rx_fifo --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
----------------Focused Condition View-------------------
Line       94 Item    1  (wr_ptr_push == (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (wr_ptr_push == (8 - 1))         Y

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:          3  (wr_ptr_push == (8 - 1))_0  -                             
  Row   2:          1  (wr_ptr_push == (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       128 Item    1  (push_valid & push_ready)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         N  '_0' not hit             Hit '_0'
  push_ready         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  push_valid_0          push_ready                    
  Row   2:          1  push_valid_1          push_ready                    
  Row   3:    ***0***  push_ready_0          push_valid                    
  Row   4:          1  push_ready_1          push_valid                    

----------------Focused Condition View-------------------
Line       138 Item    1  (rd_ptr_pop == (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (rd_ptr_pop == (8 - 1))         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          3  (rd_ptr_pop == (8 - 1))_0  -                             
  Row   2:          1  (rd_ptr_pop == (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       154 Item    1  (pop_valid & pop_ready)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         Y
   pop_ready         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  pop_valid_0           pop_ready                     
  Row   2:          1  pop_valid_1           pop_ready                     
  Row   3:          1  pop_ready_0           pop_valid                     
  Row   4:          1  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       161 Item    1  (wr_ptr_push == rd_ptr_push)
Condition totals: 1 of 1 input term covered = 100.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (wr_ptr_push == rd_ptr_push)         Y

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:          1  (wr_ptr_push == rd_ptr_push)_0  -                             
  Row   2:          3  (wr_ptr_push == rd_ptr_push)_1  -                             

----------------Focused Condition View-------------------
Line       162 Item    1  (push_fifo_lvl_dly >= (8 - 1))
Condition totals: 0 of 1 input term covered = 0.00%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (push_fifo_lvl_dly >= (8 - 1))         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:          3  (push_fifo_lvl_dly >= (8 - 1))_0  -                             
  Row   2:    ***0***  (push_fifo_lvl_dly >= (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       169 Item    1  (wr_ptr_push > rd_ptr_push)
Condition totals: 1 of 1 input term covered = 100.00%

                   Input Term   Covered  Reason for no coverage   Hint
                  -----------  --------  -----------------------  --------------
  (wr_ptr_push > rd_ptr_push)         Y

     Rows:       Hits  FEC Target                     Non-masking condition(s)      
 ---------  ---------  --------------------           -------------------------     
  Row   1:          1  (wr_ptr_push > rd_ptr_push)_0  -                             
  Row   2:          1  (wr_ptr_push > rd_ptr_push)_1  -                             

----------------Focused Condition View-------------------
Line       178 Item    1  (wr_ptr_pop == rd_ptr_pop)
Condition totals: 1 of 1 input term covered = 100.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  (wr_ptr_pop == rd_ptr_pop)         Y

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (wr_ptr_pop == rd_ptr_pop)_0  -                             
  Row   2:          3  (wr_ptr_pop == rd_ptr_pop)_1  -                             

----------------Focused Condition View-------------------
Line       179 Item    1  (pop_fifo_lvl_dly >= (8 - 1))
Condition totals: 0 of 1 input term covered = 0.00%

                     Input Term   Covered  Reason for no coverage   Hint
                    -----------  --------  -----------------------  --------------
  (pop_fifo_lvl_dly >= (8 - 1))         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                       Non-masking condition(s)      
 ---------  ---------  --------------------             -------------------------     
  Row   1:          3  (pop_fifo_lvl_dly >= (8 - 1))_0  -                             
  Row   2:    ***0***  (pop_fifo_lvl_dly >= (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       186 Item    1  (wr_ptr_pop > rd_ptr_pop)
Condition totals: 1 of 1 input term covered = 100.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (wr_ptr_pop > rd_ptr_pop)         Y

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (wr_ptr_pop > rd_ptr_pop)_0  -                             
  Row   2:          1  (wr_ptr_pop > rd_ptr_pop)_1  -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      6         3         3    50.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/rx_fifo --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
----------------Focused Expression View-----------------
Line       120 Item    1  (push_fifo_lvl == 0)
Expression totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (push_fifo_lvl == 0)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (push_fifo_lvl == 0)_0  -                             
  Row   2:          3  (push_fifo_lvl == 0)_1  -                             

----------------Focused Expression View-----------------
Line       121 Item    1  (push_fifo_lvl == 8)
Expression totals: 0 of 1 input term covered = 0.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (push_fifo_lvl == 8)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          3  (push_fifo_lvl == 8)_0  -                             
  Row   2:    ***0***  (push_fifo_lvl == 8)_1  -                             

----------------Focused Expression View-----------------
Line       135 Item    1  (push_valid & ~push_full)
Expression totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         Y
   push_full         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  push_valid_0          ~push_full                    
  Row   2:          2  push_valid_1          ~push_full                    
  Row   3:          2  push_full_0           push_valid                    
  Row   4:    ***0***  push_full_1           push_valid                    

----------------Focused Expression View-----------------
Line       146 Item    1  (pop_fifo_lvl == 0)
Expression totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (pop_fifo_lvl == 0)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (pop_fifo_lvl == 0)_0  -                             
  Row   2:          3  (pop_fifo_lvl == 0)_1  -                             

----------------Focused Expression View-----------------
Line       147 Item    1  (pop_fifo_lvl == 8)
Expression totals: 0 of 1 input term covered = 0.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (pop_fifo_lvl == 8)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          3  (pop_fifo_lvl == 8)_0  -                             
  Row   2:    ***0***  (pop_fifo_lvl == 8)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      35        33         2    94.28%

================================Statement Details================================

Statement Coverage for instance /DUT/core/rx_fifo --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
    14                                                 module cfs_synch_fifo #(
    15                                                    parameter DATA_WIDTH = 32,
    16                                                    parameter FIFO_DEPTH = 8,
    17                                                    //Clock Domain Crossing
    18                                                    //Set this parameter to 0 only if push_clk and pop_clk are tied to the same clock signal.
    19                                                    parameter CDC        = 1,
    20                                                   
    21                                                   localparam CNT_WIDTH = $clog2(FIFO_DEPTH)
    22                                                 ) (
    23                                                   input                       reset_n,
    24                                               
    25                                                   input                       push_clk,
    26                                                   input                       push_valid,
    27                                                   input[DATA_WIDTH-1:0]       push_data,
    28                                                   output wire                 push_ready,
    29                                               
    30                                                   //Full flag - in PUSH clock domain
    31                                                   output wire                 push_full,
    32                                               
    33                                                   //Empty flag - in PUSH clock domain
    34                                                   output wire                 push_empty,
    35                                                   
    36                                                   //FIFO level - in PUSH clock domain
    37                                                   output reg[CNT_WIDTH:0]     push_fifo_lvl,
    38                                               
    39                                                   input                       pop_clk,
    40                                                   output wire                 pop_valid,
    41                                                   output wire[DATA_WIDTH-1:0] pop_data,
    42                                                   input                       pop_ready,
    43                                               
    44                                                   //Full flag - in POP clock domain
    45                                                   output wire                 pop_full,
    46                                               
    47                                                   //Empty flag - in POP clock domain
    48                                                   output wire                 pop_empty,
    49                                                   
    50                                                   //FIFO level - in POP clock domain
    51                                                   output reg[CNT_WIDTH:0]     pop_fifo_lvl
    52                                                 );
    53                                               
    54                                                   initial begin
    55                                                     assert(DATA_WIDTH >= 1) else begin
    56                                                       $error($sformatf("Legal values for DATA_WIDTH parameter must greater of equal than 1 but found 'd%0d", DATA_WIDTH));
    57                                                     end
    58                                               
    59                                                     assert(FIFO_DEPTH >= 1) else begin
    60                                                       $error($sformatf("Legal values for FIFO_DEPTH parameter must greater of equal than 1 but found 'd%0d", FIFO_DEPTH));
    61                                                     end
    62                                                   end
    63                                               
    64                                                   //Memory containing the FIFO information
    65                                                   reg[DATA_WIDTH-1:0] fifo[0:FIFO_DEPTH-1];
    66                                               
    67                                               
    68                                                   //Read pointer - in PUSH clock domain
    69                                                   wire[CNT_WIDTH-1:0] rd_ptr_push;
    70                                               
    71                                                   //Read pointer - in POP clock domain
    72                                                   reg[CNT_WIDTH-1:0]  rd_ptr_pop;
    73                                               
    74                                               
    75                                                   //Next write pointer - in PUSH clock domain
    76                                                   reg[CNT_WIDTH-1:0] next_wr_ptr_push;
    77                                               
    78                                                   //Next read pointer - in POP clock domain
    79                                                   reg[CNT_WIDTH-1:0] next_rd_ptr_pop;
    80                                               
    81                                                   //Write pointer - in PUSH clock domain
    82                                                   reg[CNT_WIDTH-1:0] wr_ptr_push;
    83                                               
    84                                                   //Write pointer - in POP clock domain
    85                                                   wire[CNT_WIDTH-1:0] wr_ptr_pop;
    86                                               
    87                                                   //FIFO level - in PUSH clock domain, delayed
    88                                                   reg[CNT_WIDTH:0] push_fifo_lvl_dly;
    89                                               
    90                                                   //FIFO level - in POP clock domain, delayed
    91                                                   reg[CNT_WIDTH:0] pop_fifo_lvl_dly;
    92                                               
    93              1                       3627         always_comb begin
    94                                                     if(wr_ptr_push == FIFO_DEPTH - 1) begin
    95              1                        452             next_wr_ptr_push = 0;
    96                                                     end
    97                                                     else begin
    98              1                       3175             next_wr_ptr_push = wr_ptr_push + 1;
    99                                                     end
    100                                                  end
    101                                                  
    102             1                      10904         always@(posedge push_clk or negedge reset_n) begin
    103                                                    if(reset_n == 0) begin
    104             1                          6             push_fifo_lvl_dly  <= 0;
    105                                                    end
    106                                                    else begin
    107             1                      10898             push_fifo_lvl_dly <= push_fifo_lvl;
    108                                                    end
    109                                                  end
    110                                                  
    111             1                      10904         always@(posedge pop_clk or negedge reset_n) begin
    112                                                    if(reset_n == 0) begin
    113             1                          6             pop_fifo_lvl_dly  <= 0;
    114                                                    end
    115                                                    else begin
    116             1                      10898             pop_fifo_lvl_dly <= pop_fifo_lvl;
    117                                                    end
    118                                                  end
    119                                                  
    120             1                       7220         assign push_empty = (push_fifo_lvl == 0);
    121             1                       7220         assign push_full  = (push_fifo_lvl == FIFO_DEPTH);
    122                                                  
    123             1                      22012         always@(posedge push_clk or negedge reset_n) begin
    124                                                    if(reset_n == 0) begin
    125             1                          6             wr_ptr_push <= 0;
    126                                                    end
    127                                                    else begin
    128                                                      if(push_valid & push_ready) begin
    129             1                       3621               fifo[wr_ptr_push] <= push_data;
    130             1                       3621               wr_ptr_push       <= next_wr_ptr_push;
    131                                                      end
    132                                                    end
    133                                                  end
    134                                              
    135             1                      22009         assign push_ready = push_valid & !push_full;
    136                                              
    137             1                       3627         always_comb begin
    138                                                    if(rd_ptr_pop == FIFO_DEPTH - 1) begin
    139             1                        452             next_rd_ptr_pop = 0;
    140                                                    end
    141                                                    else begin
    142             1                       3175             next_rd_ptr_pop = rd_ptr_pop + 1;
    143                                                    end
    144                                                  end
    145                                              
    146             1                       7220         assign pop_empty = (pop_fifo_lvl == 0);
    147             1                       7220         assign pop_full  = (pop_fifo_lvl == FIFO_DEPTH);
    148                                                  
    149             1                       8482         always@(posedge pop_clk or negedge reset_n) begin
    150                                                    if(reset_n == 0) begin
    151             1                          6             rd_ptr_pop <= 0;
    152                                                    end
    153                                                    else begin
    154                                                      if(pop_valid & pop_ready) begin
    155             1                       3621               rd_ptr_pop <= next_rd_ptr_pop;
    156                                                      end
    157                                                    end
    158                                                  end
    159                                                  
    160             1                      10912         always_comb begin
    161                                                    if(wr_ptr_push == rd_ptr_push) begin
    162                                                      if(push_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    163             1                    ***0***               push_fifo_lvl = FIFO_DEPTH;
    164                                                      end
    165                                                      else begin
    166             1                       7111               push_fifo_lvl = 0;
    167                                                      end
    168                                                    end
    169                                                    else if(wr_ptr_push > rd_ptr_push) begin
    170             1                       3288             push_fifo_lvl = wr_ptr_push - rd_ptr_push;
    171                                                    end
    172                                                    else begin
    173             1                        513             push_fifo_lvl = FIFO_DEPTH - (rd_ptr_push - wr_ptr_push);
    174                                                    end
    175                                                  end
    176                                              
    177             1                      10912         always_comb begin
    178                                                    if(wr_ptr_pop == rd_ptr_pop) begin
    179                                                      if(pop_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    180             1                    ***0***               pop_fifo_lvl = FIFO_DEPTH;
    181                                                      end
    182                                                      else begin
    183             1                       7111               pop_fifo_lvl = 0;
    184                                                      end
    185                                                    end
    186                                                    else if(wr_ptr_pop > rd_ptr_pop) begin
    187             1                       3288             pop_fifo_lvl = wr_ptr_pop - rd_ptr_pop;
    188                                                    end
    189                                                    else begin
    190             1                        513             pop_fifo_lvl = FIFO_DEPTH - (rd_ptr_pop - wr_ptr_pop);
    191                                                    end
    192                                                  end
    193                                              
    194                                                  assign pop_valid = !pop_empty;
    195             1                       7233         assign pop_data  = fifo[rd_ptr_pop];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        238       226        12    94.95%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/rx_fifo --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                              next_rd_ptr_pop[0-2]           1           1      100.00 
                             next_wr_ptr_push[0-2]           1           1      100.00 
                                           pop_clk           3           3      100.00 
                                    pop_data[0-36]           1           1      100.00 
                                         pop_empty           1           1      100.00 
                                 pop_fifo_lvl[0-2]           1           1      100.00 
                                   pop_fifo_lvl[3]           0           0        0.00 
                             pop_fifo_lvl_dly[0-2]           1           1      100.00 
                               pop_fifo_lvl_dly[3]           0           0        0.00 
                                          pop_full           0           0        0.00 
                                         pop_ready           1           1      100.00 
                                         pop_valid           1           1      100.00 
                                          push_clk           3           3      100.00 
                                   push_data[0-32]           2           2      100.00 
                                     push_data[33]           1           1      100.00 
                                  push_data[34-35]           2           2      100.00 
                                     push_data[36]           1           1      100.00 
                                        push_empty           1           1      100.00 
                                push_fifo_lvl[0-2]           1           1      100.00 
                                  push_fifo_lvl[3]           0           0        0.00 
                            push_fifo_lvl_dly[0-2]           1           1      100.00 
                              push_fifo_lvl_dly[3]           0           0        0.00 
                                         push_full           0           0        0.00 
                                        push_ready           1           1      100.00 
                                        push_valid           1           1      100.00 
                                   rd_ptr_pop[0-2]           1           1      100.00 
                                  rd_ptr_push[0-2]           1           1      100.00 
                                           reset_n           3           3      100.00 
                                   wr_ptr_pop[0-2]           1           1      100.00 
                                  wr_ptr_push[0-2]           1           1      100.00 

Total Node Count     =        119 
Toggled Node Count   =        113 
Untoggled Node Count =          6 

Toggle Coverage      =      94.95% (226 of 238 bins)

=================================================================================
=== Instance: /DUT/core/tx_fifo
=== Design Unit: work.cfs_synch_fifo
=================================================================================

Assertion Coverage:
    Assertions                       2         2         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/DUT/core/tx_fifo/#ublk#72574239#54/immed__59
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(59)
                                                        0          3
/DUT/core/tx_fifo/#ublk#72574239#54/immed__55
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(55)
                                                        0          3
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        26        26         0   100.00%

================================Branch Details================================

Branch Coverage for instance /DUT/core/tx_fifo

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
------------------------------------IF Branch------------------------------------
    94                                      4108     Count coming in to IF
    94              1                        512           if(wr_ptr_push == FIFO_DEPTH - 1) begin
    97              1                       3596           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    103                                    12570     Count coming in to IF
    103             1                          6           if(reset_n == 0) begin
    106             1                      12564           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    112                                    12570     Count coming in to IF
    112             1                          6           if(reset_n == 0) begin
    115             1                      12564           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    124                                     7930     Count coming in to IF
    124             1                          6           if(reset_n == 0) begin
    127             1                       7924           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    128                                     7924     Count coming in to IF
    128             1                       4102             if(push_valid & push_ready) begin
                                            3822     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    138                                     4108     Count coming in to IF
    138             1                        512           if(rd_ptr_pop == FIFO_DEPTH - 1) begin
    141             1                       3596           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    150                                     9764     Count coming in to IF
    150             1                          6           if(reset_n == 0) begin
    153             1                       9758           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    154                                     9758     Count coming in to IF
    154             1                       4102             if(pop_valid & pop_ready) begin
                                            5656     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    161                                    12852     Count coming in to IF
    161             1                       3767           if(wr_ptr_push == rd_ptr_push) begin
    169             1                       6080           else if(wr_ptr_push > rd_ptr_push) begin
    172             1                       3005           else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    162                                     3767     Count coming in to IF
    162             1                        786             if(push_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    165             1                       2981             else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    178                                    12852     Count coming in to IF
    178             1                       3767           if(wr_ptr_pop == rd_ptr_pop) begin
    186             1                       6080           else if(wr_ptr_pop > rd_ptr_pop) begin
    189             1                       3005           else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    179                                     3767     Count coming in to IF
    179             1                        786             if(pop_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    182             1                       2981             else begin
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      12        10         2    83.33%

================================Condition Details================================

Condition Coverage for instance /DUT/core/tx_fifo --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
----------------Focused Condition View-------------------
Line       94 Item    1  (wr_ptr_push == (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

                Input Term   Covered  Reason for no coverage   Hint
               -----------  --------  -----------------------  --------------
  (wr_ptr_push == (8 - 1))         Y

     Rows:       Hits  FEC Target                  Non-masking condition(s)      
 ---------  ---------  --------------------        -------------------------     
  Row   1:          3  (wr_ptr_push == (8 - 1))_0  -                             
  Row   2:          1  (wr_ptr_push == (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       128 Item    1  (push_valid & push_ready)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         N  '_0' not hit             Hit '_0'
  push_ready         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  push_valid_0          push_ready                    
  Row   2:          1  push_valid_1          push_ready                    
  Row   3:          1  push_ready_0          push_valid                    
  Row   4:          1  push_ready_1          push_valid                    

----------------Focused Condition View-------------------
Line       138 Item    1  (rd_ptr_pop == (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (rd_ptr_pop == (8 - 1))         Y

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          3  (rd_ptr_pop == (8 - 1))_0  -                             
  Row   2:          1  (rd_ptr_pop == (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       154 Item    1  (pop_valid & pop_ready)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         N  '_0' not hit             Hit '_0'
   pop_ready         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  pop_valid_0           pop_ready                     
  Row   2:          1  pop_valid_1           pop_ready                     
  Row   3:          1  pop_ready_0           pop_valid                     
  Row   4:          1  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       161 Item    1  (wr_ptr_push == rd_ptr_push)
Condition totals: 1 of 1 input term covered = 100.00%

                    Input Term   Covered  Reason for no coverage   Hint
                   -----------  --------  -----------------------  --------------
  (wr_ptr_push == rd_ptr_push)         Y

     Rows:       Hits  FEC Target                      Non-masking condition(s)      
 ---------  ---------  --------------------            -------------------------     
  Row   1:          1  (wr_ptr_push == rd_ptr_push)_0  -                             
  Row   2:          3  (wr_ptr_push == rd_ptr_push)_1  -                             

----------------Focused Condition View-------------------
Line       162 Item    1  (push_fifo_lvl_dly >= (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (push_fifo_lvl_dly >= (8 - 1))         Y

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:          3  (push_fifo_lvl_dly >= (8 - 1))_0  -                             
  Row   2:          1  (push_fifo_lvl_dly >= (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       169 Item    1  (wr_ptr_push > rd_ptr_push)
Condition totals: 1 of 1 input term covered = 100.00%

                   Input Term   Covered  Reason for no coverage   Hint
                  -----------  --------  -----------------------  --------------
  (wr_ptr_push > rd_ptr_push)         Y

     Rows:       Hits  FEC Target                     Non-masking condition(s)      
 ---------  ---------  --------------------           -------------------------     
  Row   1:          1  (wr_ptr_push > rd_ptr_push)_0  -                             
  Row   2:          1  (wr_ptr_push > rd_ptr_push)_1  -                             

----------------Focused Condition View-------------------
Line       178 Item    1  (wr_ptr_pop == rd_ptr_pop)
Condition totals: 1 of 1 input term covered = 100.00%

                  Input Term   Covered  Reason for no coverage   Hint
                 -----------  --------  -----------------------  --------------
  (wr_ptr_pop == rd_ptr_pop)         Y

     Rows:       Hits  FEC Target                    Non-masking condition(s)      
 ---------  ---------  --------------------          -------------------------     
  Row   1:          1  (wr_ptr_pop == rd_ptr_pop)_0  -                             
  Row   2:          3  (wr_ptr_pop == rd_ptr_pop)_1  -                             

----------------Focused Condition View-------------------
Line       179 Item    1  (pop_fifo_lvl_dly >= (8 - 1))
Condition totals: 1 of 1 input term covered = 100.00%

                     Input Term   Covered  Reason for no coverage   Hint
                    -----------  --------  -----------------------  --------------
  (pop_fifo_lvl_dly >= (8 - 1))         Y

     Rows:       Hits  FEC Target                       Non-masking condition(s)      
 ---------  ---------  --------------------             -------------------------     
  Row   1:          3  (pop_fifo_lvl_dly >= (8 - 1))_0  -                             
  Row   2:          1  (pop_fifo_lvl_dly >= (8 - 1))_1  -                             

----------------Focused Condition View-------------------
Line       186 Item    1  (wr_ptr_pop > rd_ptr_pop)
Condition totals: 1 of 1 input term covered = 100.00%

                 Input Term   Covered  Reason for no coverage   Hint
                -----------  --------  -----------------------  --------------
  (wr_ptr_pop > rd_ptr_pop)         Y

     Rows:       Hits  FEC Target                   Non-masking condition(s)      
 ---------  ---------  --------------------         -------------------------     
  Row   1:          1  (wr_ptr_pop > rd_ptr_pop)_0  -                             
  Row   2:          1  (wr_ptr_pop > rd_ptr_pop)_1  -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      6         6         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/tx_fifo --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
----------------Focused Expression View-----------------
Line       120 Item    1  (push_fifo_lvl == 0)
Expression totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (push_fifo_lvl == 0)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          1  (push_fifo_lvl == 0)_0  -                             
  Row   2:          3  (push_fifo_lvl == 0)_1  -                             

----------------Focused Expression View-----------------
Line       121 Item    1  (push_fifo_lvl == 8)
Expression totals: 1 of 1 input term covered = 100.00%

            Input Term   Covered  Reason for no coverage   Hint
           -----------  --------  -----------------------  --------------
  (push_fifo_lvl == 8)         Y

     Rows:       Hits  FEC Target              Non-masking condition(s)      
 ---------  ---------  --------------------    -------------------------     
  Row   1:          3  (push_fifo_lvl == 8)_0  -                             
  Row   2:          1  (push_fifo_lvl == 8)_1  -                             

----------------Focused Expression View-----------------
Line       135 Item    1  (push_valid & ~push_full)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         Y
   push_full         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  push_valid_0          ~push_full                    
  Row   2:          1  push_valid_1          ~push_full                    
  Row   3:          1  push_full_0           push_valid                    
  Row   4:          1  push_full_1           push_valid                    

----------------Focused Expression View-----------------
Line       146 Item    1  (pop_fifo_lvl == 0)
Expression totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (pop_fifo_lvl == 0)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          1  (pop_fifo_lvl == 0)_0  -                             
  Row   2:          3  (pop_fifo_lvl == 0)_1  -                             

----------------Focused Expression View-----------------
Line       147 Item    1  (pop_fifo_lvl == 8)
Expression totals: 1 of 1 input term covered = 100.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
  (pop_fifo_lvl == 8)         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          3  (pop_fifo_lvl == 8)_0  -                             
  Row   2:          1  (pop_fifo_lvl == 8)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      35        35         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/tx_fifo --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v
    14                                                 module cfs_synch_fifo #(
    15                                                    parameter DATA_WIDTH = 32,
    16                                                    parameter FIFO_DEPTH = 8,
    17                                                    //Clock Domain Crossing
    18                                                    //Set this parameter to 0 only if push_clk and pop_clk are tied to the same clock signal.
    19                                                    parameter CDC        = 1,
    20                                                   
    21                                                   localparam CNT_WIDTH = $clog2(FIFO_DEPTH)
    22                                                 ) (
    23                                                   input                       reset_n,
    24                                               
    25                                                   input                       push_clk,
    26                                                   input                       push_valid,
    27                                                   input[DATA_WIDTH-1:0]       push_data,
    28                                                   output wire                 push_ready,
    29                                               
    30                                                   //Full flag - in PUSH clock domain
    31                                                   output wire                 push_full,
    32                                               
    33                                                   //Empty flag - in PUSH clock domain
    34                                                   output wire                 push_empty,
    35                                                   
    36                                                   //FIFO level - in PUSH clock domain
    37                                                   output reg[CNT_WIDTH:0]     push_fifo_lvl,
    38                                               
    39                                                   input                       pop_clk,
    40                                                   output wire                 pop_valid,
    41                                                   output wire[DATA_WIDTH-1:0] pop_data,
    42                                                   input                       pop_ready,
    43                                               
    44                                                   //Full flag - in POP clock domain
    45                                                   output wire                 pop_full,
    46                                               
    47                                                   //Empty flag - in POP clock domain
    48                                                   output wire                 pop_empty,
    49                                                   
    50                                                   //FIFO level - in POP clock domain
    51                                                   output reg[CNT_WIDTH:0]     pop_fifo_lvl
    52                                                 );
    53                                               
    54                                                   initial begin
    55                                                     assert(DATA_WIDTH >= 1) else begin
    56                                                       $error($sformatf("Legal values for DATA_WIDTH parameter must greater of equal than 1 but found 'd%0d", DATA_WIDTH));
    57                                                     end
    58                                               
    59                                                     assert(FIFO_DEPTH >= 1) else begin
    60                                                       $error($sformatf("Legal values for FIFO_DEPTH parameter must greater of equal than 1 but found 'd%0d", FIFO_DEPTH));
    61                                                     end
    62                                                   end
    63                                               
    64                                                   //Memory containing the FIFO information
    65                                                   reg[DATA_WIDTH-1:0] fifo[0:FIFO_DEPTH-1];
    66                                               
    67                                               
    68                                                   //Read pointer - in PUSH clock domain
    69                                                   wire[CNT_WIDTH-1:0] rd_ptr_push;
    70                                               
    71                                                   //Read pointer - in POP clock domain
    72                                                   reg[CNT_WIDTH-1:0]  rd_ptr_pop;
    73                                               
    74                                               
    75                                                   //Next write pointer - in PUSH clock domain
    76                                                   reg[CNT_WIDTH-1:0] next_wr_ptr_push;
    77                                               
    78                                                   //Next read pointer - in POP clock domain
    79                                                   reg[CNT_WIDTH-1:0] next_rd_ptr_pop;
    80                                               
    81                                                   //Write pointer - in PUSH clock domain
    82                                                   reg[CNT_WIDTH-1:0] wr_ptr_push;
    83                                               
    84                                                   //Write pointer - in POP clock domain
    85                                                   wire[CNT_WIDTH-1:0] wr_ptr_pop;
    86                                               
    87                                                   //FIFO level - in PUSH clock domain, delayed
    88                                                   reg[CNT_WIDTH:0] push_fifo_lvl_dly;
    89                                               
    90                                                   //FIFO level - in POP clock domain, delayed
    91                                                   reg[CNT_WIDTH:0] pop_fifo_lvl_dly;
    92                                               
    93              1                       4108         always_comb begin
    94                                                     if(wr_ptr_push == FIFO_DEPTH - 1) begin
    95              1                        512             next_wr_ptr_push = 0;
    96                                                     end
    97                                                     else begin
    98              1                       3596             next_wr_ptr_push = wr_ptr_push + 1;
    99                                                     end
    100                                                  end
    101                                                  
    102             1                      12570         always@(posedge push_clk or negedge reset_n) begin
    103                                                    if(reset_n == 0) begin
    104             1                          6             push_fifo_lvl_dly  <= 0;
    105                                                    end
    106                                                    else begin
    107             1                      12564             push_fifo_lvl_dly <= push_fifo_lvl;
    108                                                    end
    109                                                  end
    110                                                  
    111             1                      12570         always@(posedge pop_clk or negedge reset_n) begin
    112                                                    if(reset_n == 0) begin
    113             1                          6             pop_fifo_lvl_dly  <= 0;
    114                                                    end
    115                                                    else begin
    116             1                      12564             pop_fifo_lvl_dly <= pop_fifo_lvl;
    117                                                    end
    118                                                  end
    119                                                  
    120             1                       7226         assign push_empty = (push_fifo_lvl == 0);
    121             1                       7226         assign push_full  = (push_fifo_lvl == FIFO_DEPTH);
    122                                                  
    123             1                       7930         always@(posedge push_clk or negedge reset_n) begin
    124                                                    if(reset_n == 0) begin
    125             1                          6             wr_ptr_push <= 0;
    126                                                    end
    127                                                    else begin
    128                                                      if(push_valid & push_ready) begin
    129             1                       4102               fifo[wr_ptr_push] <= push_data;
    130             1                       4102               wr_ptr_push       <= next_wr_ptr_push;
    131                                                      end
    132                                                    end
    133                                                  end
    134                                              
    135             1                       5893         assign push_ready = push_valid & !push_full;
    136                                              
    137             1                       4108         always_comb begin
    138                                                    if(rd_ptr_pop == FIFO_DEPTH - 1) begin
    139             1                        512             next_rd_ptr_pop = 0;
    140                                                    end
    141                                                    else begin
    142             1                       3596             next_rd_ptr_pop = rd_ptr_pop + 1;
    143                                                    end
    144                                                  end
    145                                              
    146             1                       7226         assign pop_empty = (pop_fifo_lvl == 0);
    147             1                       7226         assign pop_full  = (pop_fifo_lvl == FIFO_DEPTH);
    148                                                  
    149             1                       9764         always@(posedge pop_clk or negedge reset_n) begin
    150                                                    if(reset_n == 0) begin
    151             1                          6             rd_ptr_pop <= 0;
    152                                                    end
    153                                                    else begin
    154                                                      if(pop_valid & pop_ready) begin
    155             1                       4102               rd_ptr_pop <= next_rd_ptr_pop;
    156                                                      end
    157                                                    end
    158                                                  end
    159                                                  
    160             1                      12852         always_comb begin
    161                                                    if(wr_ptr_push == rd_ptr_push) begin
    162                                                      if(push_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    163             1                        786               push_fifo_lvl = FIFO_DEPTH;
    164                                                      end
    165                                                      else begin
    166             1                       2981               push_fifo_lvl = 0;
    167                                                      end
    168                                                    end
    169                                                    else if(wr_ptr_push > rd_ptr_push) begin
    170             1                       6080             push_fifo_lvl = wr_ptr_push - rd_ptr_push;
    171                                                    end
    172                                                    else begin
    173             1                       3005             push_fifo_lvl = FIFO_DEPTH - (rd_ptr_push - wr_ptr_push);
    174                                                    end
    175                                                  end
    176                                              
    177             1                      12852         always_comb begin
    178                                                    if(wr_ptr_pop == rd_ptr_pop) begin
    179                                                      if(pop_fifo_lvl_dly >= FIFO_DEPTH - 1) begin
    180             1                        786               pop_fifo_lvl = FIFO_DEPTH;
    181                                                      end
    182                                                      else begin
    183             1                       2981               pop_fifo_lvl = 0;
    184                                                      end
    185                                                    end
    186                                                    else if(wr_ptr_pop > rd_ptr_pop) begin
    187             1                       6080             pop_fifo_lvl = wr_ptr_pop - rd_ptr_pop;
    188                                                    end
    189                                                    else begin
    190             1                       3005             pop_fifo_lvl = FIFO_DEPTH - (rd_ptr_pop - wr_ptr_pop);
    191                                                    end
    192                                                  end
    193                                              
    194                                                  assign pop_valid = !pop_empty;
    195             1                       7710         assign pop_data  = fifo[rd_ptr_pop];

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        238       238         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/tx_fifo --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                              next_rd_ptr_pop[0-2]           1           1      100.00 
                             next_wr_ptr_push[0-2]           1           1      100.00 
                                           pop_clk           3           3      100.00 
                                    pop_data[0-36]           1           1      100.00 
                                         pop_empty           1           1      100.00 
                                 pop_fifo_lvl[0-3]           1           1      100.00 
                             pop_fifo_lvl_dly[0-3]           1           1      100.00 
                                          pop_full           1           1      100.00 
                                         pop_ready           1           1      100.00 
                                         pop_valid           1           1      100.00 
                                          push_clk           3           3      100.00 
                                   push_data[0-36]           1           1      100.00 
                                        push_empty           1           1      100.00 
                                push_fifo_lvl[0-3]           1           1      100.00 
                            push_fifo_lvl_dly[0-3]           1           1      100.00 
                                         push_full           1           1      100.00 
                                        push_ready           1           1      100.00 
                                        push_valid           1           1      100.00 
                                   rd_ptr_pop[0-2]           1           1      100.00 
                                  rd_ptr_push[0-2]           1           1      100.00 
                                           reset_n           3           3      100.00 
                                   wr_ptr_pop[0-2]           1           1      100.00 
                                  wr_ptr_push[0-2]           1           1      100.00 

Total Node Count     =        119 
Toggled Node Count   =        119 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (238 of 238 bins)

=================================================================================
=== Instance: /DUT/core/tx_ctrl
=== Design Unit: work.cfs_tx_ctrl
=================================================================================
Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/tx_ctrl --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_tx_ctrl.v
----------------Focused Expression View-----------------
Line       40 Item    1  (pop_valid & md_tx_ready)
Expression totals: 2 of 2 input terms covered = 100.00%

   Input Term   Covered  Reason for no coverage   Hint
  -----------  --------  -----------------------  --------------
    pop_valid         Y
  md_tx_ready         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  pop_valid_0           md_tx_ready                   
  Row   2:          1  pop_valid_1           md_tx_ready                   
  Row   3:          1  md_tx_ready_0         pop_valid                     
  Row   4:          1  md_tx_ready_1         pop_valid                     


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       1         1         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/tx_ctrl --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_tx_ctrl.v
    13                                                 module cfs_tx_ctrl #(
    14                                                   parameter ALGN_DATA_WIDTH = 32,
    15                                               
    16                                                   localparam int unsigned ALGN_OFFSET_WIDTH = ALGN_DATA_WIDTH <= 8 ? 1 : $clog2(ALGN_DATA_WIDTH/8),
    17                                                   localparam int unsigned ALGN_SIZE_WIDTH   = $clog2(ALGN_DATA_WIDTH/8)+1,
    18                                                   localparam int unsigned FIFO_DATA_WIDTH   = ALGN_DATA_WIDTH + ALGN_OFFSET_WIDTH + ALGN_SIZE_WIDTH
    19                                                 )(
    20                                                   input                              pop_valid,
    21                                                   input[FIFO_DATA_WIDTH-1:0]         pop_data,
    22                                                   output wire                        pop_ready,
    23                                               
    24                                                   output wire                        md_tx_valid,
    25                                                   output wire[ALGN_DATA_WIDTH-1:0]   md_tx_data,
    26                                                   output wire[ALGN_OFFSET_WIDTH-1:0] md_tx_offset,
    27                                                   output wire[ALGN_SIZE_WIDTH-1:0]   md_tx_size,
    28                                                   input                              md_tx_ready
    29                                                   );
    30                                                   
    31                                                   localparam int unsigned DATA_MSB = ALGN_DATA_WIDTH-1;
    32                                                   localparam int unsigned DATA_LSB = 0;
    33                                                   
    34                                                   localparam int unsigned OFFSET_MSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH-1;
    35                                                   localparam int unsigned OFFSET_LSB = ALGN_DATA_WIDTH;
    36                                                   
    37                                                   localparam int unsigned SIZE_MSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH+ALGN_SIZE_WIDTH-1;
    38                                                   localparam int unsigned SIZE_LSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH;
    39                                                   
    40              1                      11313         assign pop_ready    = pop_valid & md_tx_ready;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        156       156         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/tx_ctrl --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                  md_tx_data[0-31]           1           1      100.00 
                                 md_tx_offset[0-1]           1           1      100.00 
                                       md_tx_ready           1           3      100.00 
                                   md_tx_size[0-2]           1           1      100.00 
                                       md_tx_valid           1           1      100.00 
                                    pop_data[0-36]           1           1      100.00 
                                         pop_ready           1           1      100.00 
                                         pop_valid           1           1      100.00 

Total Node Count     =         78 
Toggled Node Count   =         78 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (156 of 156 bins)

=================================================================================
=== Instance: /DUT/core/ctrl
=== Design Unit: work.cfs_ctrl
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        36        29         7    80.55%

================================Branch Details================================

Branch Coverage for instance /DUT/core/ctrl

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_ctrl.v
------------------------------------IF Branch------------------------------------
    60                                     11592     Count coming in to IF
    60              1                          6           if(reset_n == 0) begin
    73              1                      11586           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    74                                     11586     Count coming in to IF
    74              1                        451             if((push_valid == 1) & (push_ready == 0)) begin
    109             1                       4102             else if((push_valid == 1) & (push_ready == 1)) begin
    198             1                       7033             else begin
Branch totals: 3 hits of 3 branches = 100.00%

------------------------------------IF Branch------------------------------------
    77                                       451     Count coming in to IF
    77              1                        196               if(unaligned_bytes_processed >= unaligned_size) begin
    102             1                        255               else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    80                                       196     Count coming in to IF
    80              1                        112                 if((pop_valid == 1) && (pop_ready == 1)) begin
    91              1                    ***0***                 else if((pop_valid == 1) && (pop_ready == 0)) begin
    96              1                         84                 else begin
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    112                                     4102     Count coming in to IF
    112             1                       2015               if(unaligned_bytes_processed >= unaligned_size) begin
    166             1                       2087               else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    115                                     2015     Count coming in to IF
    115             1                         29                 if((pop_valid == 1) && (pop_ready == 1)) begin
    149             1                    ***0***                 else if((pop_valid == 1) && (pop_ready == 0)) begin
    157             1                       1986                 else begin
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    118                                       29     Count coming in to IF
    118             1                         29                   if(pop_data[SIZE_MSB:SIZE_LSB] >= ctrl_size) begin
    141             1                    ***0***                   else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    132                                       29     Count coming in to IF
    132             1                         15                     if(pop_data[SIZE_MSB:SIZE_LSB] > ctrl_size) begin
    137             1                         14                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    169                                     2087     Count coming in to IF
    169             1                       1570                 if((unaligned_size - unaligned_bytes_processed) >= ctrl_size) begin
    185             1                        517                 else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    179                                     1570     Count coming in to IF
    179             1                        798                   if(unaligned_bytes_processed + ctrl_size >= unaligned_size) begin
                                             772     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    201                                     7033     Count coming in to IF
    201             1                       7027               if(unaligned_bytes_processed >= unaligned_size) begin
    251             1                          6               else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    204                                     7027     Count coming in to IF
    204             1                       3480                 if((pop_valid == 1) && (pop_ready == 1)) begin
    242             1                    ***0***                 else if((pop_valid == 1) && (pop_ready == 0)) begin
    246             1                       3547                 else begin
Branch totals: 2 hits of 3 branches = 66.66%

------------------------------------IF Branch------------------------------------
    205                                     3480     Count coming in to IF
    205             1                       2503                   if(pop_data[SIZE_MSB:SIZE_LSB] >= (ctrl_size - aligned_bytes_processed)) begin
    226             1                        977                   else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    218                                     2503     Count coming in to IF
    218             1                       1315                     if(pop_data[SIZE_MSB:SIZE_LSB] == (ctrl_size - aligned_bytes_processed)) begin
    221             1                       1188                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    254                                        6     Count coming in to IF
    254             1                    ***0***                 if(unaligned_size - unaligned_bytes_processed >= (ctrl_size - aligned_bytes_processed)) begin
    272             1                          6                 else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    264                                  ***0***     Count coming in to IF
    264             1                    ***0***                   if(unaligned_bytes_processed + ctrl_size - aligned_bytes_processed >= unaligned_size) begin
    268             1                    ***0***                   else begin
Branch totals: 0 hits of 2 branches = 0.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                      27        12        15    44.44%

================================Condition Details================================

Condition Coverage for instance /DUT/core/ctrl --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_ctrl.v
----------------Focused Condition View-------------------
Line       74 Item    1  (push_valid & ~push_ready)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         Y
  push_ready         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  push_valid_0          ~push_ready                   
  Row   2:          1  push_valid_1          ~push_ready                   
  Row   3:          1  push_ready_0          push_valid                    
  Row   4:          1  push_ready_1          push_valid                    

----------------Focused Condition View-------------------
Line       77 Item    1  (unaligned_bytes_processed >= unaligned_size)
Condition totals: 1 of 1 input term covered = 100.00%

                                     Input Term   Covered  Reason for no coverage   Hint
                                    -----------  --------  -----------------------  --------------
  (unaligned_bytes_processed >= unaligned_size)         Y

     Rows:       Hits  FEC Target                                       Non-masking condition(s)      
 ---------  ---------  --------------------                             -------------------------     
  Row   1:          1  (unaligned_bytes_processed >= unaligned_size)_0  -                             
  Row   2:          1  (unaligned_bytes_processed >= unaligned_size)_1  -                             

----------------Focused Condition View-------------------
Line       80 Item    1  (pop_valid && pop_ready)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         Y
   pop_ready         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  pop_valid_0           -                             
  Row   2:          1  pop_valid_1           pop_ready                     
  Row   3:    ***0***  pop_ready_0           pop_valid                     
  Row   4:          1  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       91 Item    1  (pop_valid && ~pop_ready)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         N  '_1' not hit             Hit '_1'
   pop_ready         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  pop_valid_0           -                             
  Row   2:    ***0***  pop_valid_1           ~pop_ready                    
  Row   3:    ***0***  pop_ready_0           pop_valid                     
  Row   4:    ***0***  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       109 Item    1  (push_valid & push_ready)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
  push_valid         N  '_0' not hit             Hit '_0'
  push_ready         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  push_valid_0          push_ready                    
  Row   2:          1  push_valid_1          push_ready                    
  Row   3:    ***0***  push_ready_0          push_valid                    
  Row   4:          1  push_ready_1          push_valid                    

----------------Focused Condition View-------------------
Line       112 Item    1  (unaligned_bytes_processed >= unaligned_size)
Condition totals: 1 of 1 input term covered = 100.00%

                                     Input Term   Covered  Reason for no coverage   Hint
                                    -----------  --------  -----------------------  --------------
  (unaligned_bytes_processed >= unaligned_size)         Y

     Rows:       Hits  FEC Target                                       Non-masking condition(s)      
 ---------  ---------  --------------------                             -------------------------     
  Row   1:          1  (unaligned_bytes_processed >= unaligned_size)_0  -                             
  Row   2:          1  (unaligned_bytes_processed >= unaligned_size)_1  -                             

----------------Focused Condition View-------------------
Line       115 Item    1  (pop_valid && pop_ready)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         Y
   pop_ready         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  pop_valid_0           -                             
  Row   2:          1  pop_valid_1           pop_ready                     
  Row   3:    ***0***  pop_ready_0           pop_valid                     
  Row   4:          1  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       118 Item    1  (pop_data[36:34] >= ctrl_size)
Condition totals: 0 of 1 input term covered = 0.00%

                      Input Term   Covered  Reason for no coverage   Hint
                     -----------  --------  -----------------------  --------------
  (pop_data[36:34] >= ctrl_size)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                        Non-masking condition(s)      
 ---------  ---------  --------------------              -------------------------     
  Row   1:    ***0***  (pop_data[36:34] >= ctrl_size)_0  -                             
  Row   2:          1  (pop_data[36:34] >= ctrl_size)_1  -                             

----------------Focused Condition View-------------------
Line       132 Item    1  (pop_data[36:34] > ctrl_size)
Condition totals: 1 of 1 input term covered = 100.00%

                     Input Term   Covered  Reason for no coverage   Hint
                    -----------  --------  -----------------------  --------------
  (pop_data[36:34] > ctrl_size)         Y

     Rows:       Hits  FEC Target                       Non-masking condition(s)      
 ---------  ---------  --------------------             -------------------------     
  Row   1:          1  (pop_data[36:34] > ctrl_size)_0  -                             
  Row   2:          1  (pop_data[36:34] > ctrl_size)_1  -                             

----------------Focused Condition View-------------------
Line       149 Item    1  (pop_valid && ~pop_ready)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         N  '_1' not hit             Hit '_1'
   pop_ready         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  pop_valid_0           -                             
  Row   2:    ***0***  pop_valid_1           ~pop_ready                    
  Row   3:    ***0***  pop_ready_0           pop_valid                     
  Row   4:    ***0***  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       169 Item    1  ((unaligned_size - unaligned_bytes_processed) >= ctrl_size)
Condition totals: 1 of 1 input term covered = 100.00%

                                                   Input Term   Covered  Reason for no coverage   Hint
                                                  -----------  --------  -----------------------  --------------
  ((unaligned_size - unaligned_bytes_processed) >= ctrl_size)         Y

     Rows:       Hits  FEC Target                                                     Non-masking condition(s)      
 ---------  ---------  --------------------                                           -------------------------     
  Row   1:          1  ((unaligned_size - unaligned_bytes_processed) >= ctrl_size)_0  -                             
  Row   2:          1  ((unaligned_size - unaligned_bytes_processed) >= ctrl_size)_1  -                             

----------------Focused Condition View-------------------
Line       179 Item    1  ((unaligned_bytes_processed + ctrl_size) >= unaligned_size)
Condition totals: 1 of 1 input term covered = 100.00%

                                                   Input Term   Covered  Reason for no coverage   Hint
                                                  -----------  --------  -----------------------  --------------
  ((unaligned_bytes_processed + ctrl_size) >= unaligned_size)         Y

     Rows:       Hits  FEC Target                                                     Non-masking condition(s)      
 ---------  ---------  --------------------                                           -------------------------     
  Row   1:          1  ((unaligned_bytes_processed + ctrl_size) >= unaligned_size)_0  -                             
  Row   2:          1  ((unaligned_bytes_processed + ctrl_size) >= unaligned_size)_1  -                             

----------------Focused Condition View-------------------
Line       201 Item    1  (unaligned_bytes_processed >= unaligned_size)
Condition totals: 0 of 1 input term covered = 0.00%

                                     Input Term   Covered  Reason for no coverage   Hint
                                    -----------  --------  -----------------------  --------------
  (unaligned_bytes_processed >= unaligned_size)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                                       Non-masking condition(s)      
 ---------  ---------  --------------------                             -------------------------     
  Row   1:    ***0***  (unaligned_bytes_processed >= unaligned_size)_0  -                             
  Row   2:          3  (unaligned_bytes_processed >= unaligned_size)_1  -                             

----------------Focused Condition View-------------------
Line       204 Item    1  (pop_valid && pop_ready)
Condition totals: 1 of 2 input terms covered = 50.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         Y
   pop_ready         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  pop_valid_0           -                             
  Row   2:          1  pop_valid_1           pop_ready                     
  Row   3:    ***0***  pop_ready_0           pop_valid                     
  Row   4:          1  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       205 Item    1  (pop_data[36:34] >= (ctrl_size - aligned_bytes_processed))
Condition totals: 1 of 1 input term covered = 100.00%

                                                  Input Term   Covered  Reason for no coverage   Hint
                                                 -----------  --------  -----------------------  --------------
  (pop_data[36:34] >= (ctrl_size - aligned_bytes_processed))         Y

     Rows:       Hits  FEC Target                                                    Non-masking condition(s)      
 ---------  ---------  --------------------                                          -------------------------     
  Row   1:          1  (pop_data[36:34] >= (ctrl_size - aligned_bytes_processed))_0  -                             
  Row   2:          1  (pop_data[36:34] >= (ctrl_size - aligned_bytes_processed))_1  -                             

----------------Focused Condition View-------------------
Line       218 Item    1  (pop_data[36:34] == (ctrl_size - aligned_bytes_processed))
Condition totals: 1 of 1 input term covered = 100.00%

                                                  Input Term   Covered  Reason for no coverage   Hint
                                                 -----------  --------  -----------------------  --------------
  (pop_data[36:34] == (ctrl_size - aligned_bytes_processed))         Y

     Rows:       Hits  FEC Target                                                    Non-masking condition(s)      
 ---------  ---------  --------------------                                          -------------------------     
  Row   1:          1  (pop_data[36:34] == (ctrl_size - aligned_bytes_processed))_0  -                             
  Row   2:          1  (pop_data[36:34] == (ctrl_size - aligned_bytes_processed))_1  -                             

----------------Focused Condition View-------------------
Line       242 Item    1  (pop_valid && ~pop_ready)
Condition totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
   pop_valid         N  '_1' not hit             Hit '_1'
   pop_ready         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  pop_valid_0           -                             
  Row   2:    ***0***  pop_valid_1           ~pop_ready                    
  Row   3:    ***0***  pop_ready_0           pop_valid                     
  Row   4:    ***0***  pop_ready_1           pop_valid                     

----------------Focused Condition View-------------------
Line       254 Item    1  ((unaligned_size - unaligned_bytes_processed) >= (ctrl_size - aligned_bytes_processed))
Condition totals: 0 of 1 input term covered = 0.00%

                                                                               Input Term   Covered  Reason for no coverage   Hint
                                                                              -----------  --------  -----------------------  --------------
  ((unaligned_size - unaligned_bytes_processed) >= (ctrl_size - aligned_bytes_processed))         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                                                                 Non-masking condition(s)      
 ---------  ---------  --------------------                                                                       -------------------------     
  Row   1:    ***0***  ((unaligned_size - unaligned_bytes_processed) >= (ctrl_size - aligned_bytes_processed))_0  -                             
  Row   2:    ***0***  ((unaligned_size - unaligned_bytes_processed) >= (ctrl_size - aligned_bytes_processed))_1  -                             

----------------Focused Condition View-------------------
Line       264 Item    1  (((unaligned_bytes_processed + ctrl_size) - aligned_bytes_processed) >= unaligned_size)
Condition totals: 0 of 1 input term covered = 0.00%

                                                                               Input Term   Covered  Reason for no coverage   Hint
                                                                              -----------  --------  -----------------------  --------------
  (((unaligned_bytes_processed + ctrl_size) - aligned_bytes_processed) >= unaligned_size)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target                                                                                 Non-masking condition(s)      
 ---------  ---------  --------------------                                                                       -------------------------     
  Row   1:    ***0***  (((unaligned_bytes_processed + ctrl_size) - aligned_bytes_processed) >= unaligned_size)_0  -                             
  Row   2:    ***0***  (((unaligned_bytes_processed + ctrl_size) - aligned_bytes_processed) >= unaligned_size)_1  -                             


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                      83        67        16    80.72%

================================Statement Details================================

Statement Coverage for instance /DUT/core/ctrl --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_ctrl.v
    12                                                 module cfs_ctrl #(
    13                                                   parameter ALGN_DATA_WIDTH = 32,
    14                                               
    15                                                   localparam int unsigned ALGN_OFFSET_WIDTH = ALGN_DATA_WIDTH <= 8 ? 1 : $clog2(ALGN_DATA_WIDTH/8),
    16                                                   localparam int unsigned ALGN_SIZE_WIDTH   = $clog2(ALGN_DATA_WIDTH/8)+1,
    17                                                   localparam int unsigned FIFO_WIDTH        = ALGN_DATA_WIDTH + ALGN_OFFSET_WIDTH + ALGN_SIZE_WIDTH
    18                                                 )(
    19                                                   
    20                                                   input                        reset_n,
    21                                                   input                        clk,
    22                                               
    23                                                   input                        pop_valid,
    24                                                   input[FIFO_WIDTH-1:0]        pop_data,
    25                                                   output reg                   pop_ready,
    26                                               
    27                                                   output reg                   push_valid,
    28                                                   output reg[FIFO_WIDTH-1:0]   push_data,
    29                                                   input                        push_ready,
    30                                                   
    31                                                   input[ALGN_OFFSET_WIDTH-1:0] ctrl_offset,
    32                                                   input[ALGN_SIZE_WIDTH-1:0]   ctrl_size
    33                                                   );
    34                                                   
    35                                                   localparam int unsigned DATA_MSB = ALGN_DATA_WIDTH-1;
    36                                                   localparam int unsigned DATA_LSB = 0;
    37                                                   
    38                                                   localparam int unsigned OFFSET_MSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH-1;
    39                                                   localparam int unsigned OFFSET_LSB = ALGN_DATA_WIDTH;
    40                                                   
    41                                                   localparam int unsigned SIZE_MSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH+ALGN_SIZE_WIDTH-1;
    42                                                   localparam int unsigned SIZE_LSB = ALGN_DATA_WIDTH+ALGN_OFFSET_WIDTH;
    43                                                   
    44                                                   //Current offset to be aligned
    45                                                   reg[ALGN_OFFSET_WIDTH-1:0] unaligned_offset;
    46                                                   
    47                                                   //Current size to be aligned
    48                                                   reg[ALGN_SIZE_WIDTH-1:0] unaligned_size;
    49                                                   
    50                                                   //Current data to be aligned
    51                                                   reg[ALGN_DATA_WIDTH-1:0] unaligned_data;
    52                                                   
    53                                                   //Current number of bytes from the unaligned data which were already processed
    54                                                   reg[ALGN_SIZE_WIDTH-1:0] unaligned_bytes_processed;
    55                                                   
    56                                                   //Current number of bytes in the aligned data so far
    57                                                   reg[ALGN_SIZE_WIDTH-1:0] aligned_bytes_processed;
    58                                                   
    59              1                      11592         always@(posedge clk or negedge reset_n) begin
    60                                                     if(reset_n == 0) begin
    61              1                          6             pop_ready                 <= 1;
    62                                                       
    63              1                          6             push_valid                <= 0;
    64              1                          6             push_data                 <= 0;
    65                                                       
    66              1                          6             unaligned_offset          <= 0;
    67              1                          6             unaligned_size            <= 0;
    68              1                          6             unaligned_data            <= 0;
    69              1                          6             unaligned_bytes_processed <= 0;
    70                                                       
    71              1                          6             aligned_bytes_processed   <= 0;
    72                                                     end
    73                                                     else begin
    74                                                       if((push_valid == 1) & (push_ready == 0)) begin
    75                                                         //Aligned data is waiting to be accepted
    76                                                         
    77                                                         if(unaligned_bytes_processed >= unaligned_size) begin
    78                                                           //All the buffered unaligned bytes were processed - try to take new ones
    79                                                           
    80                                                           if((pop_valid == 1) && (pop_ready == 1)) begin
    81                                                             //Transfer the unaligned data to the internal buffer
    82                                                             
    83              1                        112                   pop_ready                 <= 0;
    84                                                             
    85              1                        112                   unaligned_offset          <= pop_data[OFFSET_MSB:OFFSET_LSB];
    86              1                        112                   unaligned_size            <= pop_data[SIZE_MSB:SIZE_LSB];
    87              1                        112                   unaligned_data            <= pop_data[DATA_MSB:DATA_LSB];
    88              1                        112                   unaligned_bytes_processed <= 0;
    89                                                       
    90                                                           end
    91                                                           else if((pop_valid == 1) && (pop_ready == 0)) begin
    92                                                             //Accept the unaligned data
    93                                                             
    94              1                    ***0***                   pop_ready <= 1;
    95                                                           end
    96                                                           else begin
    97                                                             //Already accept the future unaligned data which will come
    98                                                             
    99              1                         84                   pop_ready <= 1;
    100                                                          end
    101                                                        end
    102                                                        else begin
    103                                                          //There is no room to save any incomming unaligned data, so stop the flow
    104                                                          
    105             1                        255                 pop_ready <= 0;
    106                                                        end
    107                                                        
    108                                                      end
    109                                                      else if((push_valid == 1) & (push_ready == 1)) begin
    110                                                        //Aligned data was accepted
    111                                                        
    112                                                        if(unaligned_bytes_processed >= unaligned_size) begin
    113                                                          //All the buffered unaligned bytes were processed
    114                                                          
    115                                                          if((pop_valid == 1) && (pop_ready == 1)) begin
    116                                                            //Incomming unaligned bytes are ready to be processed
    117                                                            
    118                                                            if(pop_data[SIZE_MSB:SIZE_LSB] >= ctrl_size) begin
    119                                                              //There is enough information on the incomming unaligned bytes to aligned it
    120                                                              
    121             1                         29                     push_valid                       <= 1;
    122             1                         29                     push_data[DATA_MSB:DATA_LSB]     <= ((('h1 << (ctrl_size * 8)) - 1) & (pop_data[DATA_MSB:DATA_LSB] >> (pop_data[OFFSET_MSB:OFFSET_LSB] * 8))) << (8 * ctrl_offset);
    123             1                         29                     push_data[SIZE_MSB:SIZE_LSB]     <= ctrl_size;
    124             1                         29                     push_data[OFFSET_MSB:OFFSET_LSB] <= ctrl_offset;
    125                                                              
    126             1                         29                     unaligned_offset                 <= pop_data[OFFSET_MSB:OFFSET_LSB];
    127             1                         29                     unaligned_size                   <= pop_data[SIZE_MSB:SIZE_LSB];
    128             1                         29                     unaligned_data                   <= pop_data[DATA_MSB:DATA_LSB];
    129             1                         29                     unaligned_bytes_processed        <= ctrl_size;
    130             1                         29                     aligned_bytes_processed          <= 0;
    131                                                              
    132                                                              if(pop_data[SIZE_MSB:SIZE_LSB] > ctrl_size) begin
    133                                                                //There is too much data in the incomming unaligned packet. Stop the reception
    134                                                                //to have time to align it all.
    135             1                         15                       pop_ready <= 0;
    136                                                              end
    137                                                              else begin
    138             1                         14                       pop_ready <= 1;
    139                                                              end
    140                                                            end
    141                                                            else begin
    142                                                              //There is no enough information on the incomming unaligned bytes to aligned it - just prepare what is available for alignment
    143                                                              
    144             1                    ***0***                     push_valid              <= 0;
    145             1                    ***0***                     push_data               <= ((('h1 << (pop_data[SIZE_MSB:SIZE_LSB] * 8)) - 1) & (pop_data[DATA_MSB:DATA_LSB] >> (pop_data[OFFSET_MSB:OFFSET_LSB] * 8))) << (8 * ctrl_offset);
    146             1                    ***0***                     aligned_bytes_processed <= pop_data[SIZE_MSB:SIZE_LSB];
    147                                                            end
    148                                                          end
    149                                                          else if((pop_valid == 1) && (pop_ready == 0)) begin
    150                                                            //There is a request to get incomming unaligned data so accept it
    151                                                            
    152             1                    ***0***                   pop_ready               <= 1;
    153             1                    ***0***                   push_valid              <= 0;
    154             1                    ***0***                   push_data               <= 0;
    155             1                    ***0***                   aligned_bytes_processed <= 0;
    156                                                          end
    157                                                          else begin
    158                                                            //Already accept the future unaligned data which will come
    159                                                            
    160             1                       1986                   pop_ready               <= 1;
    161             1                       1986                   push_valid              <= 0;
    162             1                       1986                   push_data               <= 0;
    163             1                       1986                   aligned_bytes_processed <= 0;
    164                                                          end
    165                                                        end
    166                                                        else begin
    167                                                          //There is still some unaligned bytes not processed
    168                                                          
    169                                                          if((unaligned_size - unaligned_bytes_processed) >= ctrl_size) begin
    170                                                            //There is enough information on the buffered unaligned bytes to aligned it
    171                                                            
    172             1                       1570                   push_valid                       <= 1;
    173             1                       1570                   push_data[DATA_MSB:DATA_LSB]     <= ((('h1 << (ctrl_size * 8)) - 1) & (unaligned_data >> ((unaligned_offset + unaligned_bytes_processed) * 8))) << (8 * ctrl_offset);
    174             1                       1570                   push_data[SIZE_MSB:SIZE_LSB]     <= ctrl_size;
    175             1                       1570                   push_data[OFFSET_MSB:OFFSET_LSB] <= ctrl_offset;
    176             1                       1570                   unaligned_bytes_processed        <= unaligned_bytes_processed + ctrl_size;
    177             1                       1570                   aligned_bytes_processed          <= 0;
    178                                                            
    179                                                            if(unaligned_bytes_processed + ctrl_size >= unaligned_size) begin
    180                                                              //The buffered unaligned data was completly processed, get ready for new incomming unaligned data
    181                                                              
    182             1                        798                     pop_ready <= 1;
    183                                                            end
    184                                                          end
    185                                                          else begin
    186                                                            //There is no enough information on the buffered unaligned bytes to aligned it - just prepare what is available for alignment
    187                                                            
    188             1                        517                   push_valid                <= 0;
    189             1                        517                   push_data                 <= ((('h1 << ((unaligned_size - unaligned_bytes_processed) * 8)) - 1) & (unaligned_data >> ((unaligned_offset + unaligned_bytes_processed) * 8))) << (8 * ctrl_offset);
    190             1                        517                   unaligned_bytes_processed <= unaligned_size;
    191             1                        517                   aligned_bytes_processed   <= unaligned_size - unaligned_bytes_processed;
    192                                                            
    193                                                            //Already accept any incomming unaligned data
    194             1                        517                   pop_ready <= 1;
    195                                                          end
    196                                                        end
    197                                                      end
    198                                                      else begin
    199                                                        //There is no aligned data sent so far
    200                                                        
    201                                                        if(unaligned_bytes_processed >= unaligned_size) begin
    202                                                          //All the buffered unaligned bytes were processed
    203                                                          
    204                                                          if((pop_valid == 1) && (pop_ready == 1)) begin
    205                                                            if(pop_data[SIZE_MSB:SIZE_LSB] >= (ctrl_size - aligned_bytes_processed)) begin
    206                                                              //There is enough information in the incomming unaligned data to send an aligned packet
    207                                                              
    208             1                       2503                     push_valid                       <= 1;
    209             1                       2503                     push_data[DATA_MSB:DATA_LSB]     <= push_data[DATA_MSB:DATA_LSB] | (((('h1 << ((ctrl_size - aligned_bytes_processed) * 8)) - 1) & (pop_data[DATA_MSB:DATA_LSB] >> (pop_data[OFFSET_MSB:OFFSET_LSB] * 8))) << (8 * (ctrl_offset + aligned_bytes_processed)));
    210             1                       2503                     push_data[SIZE_MSB:SIZE_LSB]     <= ctrl_size;
    211             1                       2503                     push_data[OFFSET_MSB:OFFSET_LSB] <= ctrl_offset;
    212                                                              
    213             1                       2503                     unaligned_offset                 <= pop_data[OFFSET_MSB:OFFSET_LSB];
    214             1                       2503                     unaligned_size                   <= pop_data[SIZE_MSB:SIZE_LSB];
    215             1                       2503                     unaligned_data                   <= pop_data[DATA_MSB:DATA_LSB];
    216             1                       2503                     unaligned_bytes_processed        <= ctrl_size - aligned_bytes_processed;
    217                                                              
    218                                                              if(pop_data[SIZE_MSB:SIZE_LSB] == (ctrl_size - aligned_bytes_processed)) begin
    219             1                       1315                       pop_ready <= 1;
    220                                                              end
    221                                                              else begin
    222             1                       1188                       pop_ready <= 0;
    223                                                              end
    224                                                              
    225                                                            end
    226                                                            else begin
    227                                                               //There is no enough information on the buffered unaligned bytes to aligned it - just prepare what is available for alignment
    228                                                              
    229             1                        977                     push_valid                <= 0;
    230             1                        977                     push_data                 <= push_data | (((('h1 << (pop_data[SIZE_MSB:SIZE_LSB] * 8)) - 1) & (pop_data[DATA_MSB:DATA_LSB] >> (pop_data[OFFSET_MSB:OFFSET_LSB] * 8))) << (8 * (ctrl_offset + aligned_bytes_processed)));
    231             1                        977                     aligned_bytes_processed   <= aligned_bytes_processed + pop_data[SIZE_MSB:SIZE_LSB];
    232                                                              
    233             1                        977                     unaligned_offset          <= pop_data[OFFSET_MSB:OFFSET_LSB];
    234             1                        977                     unaligned_size            <= pop_data[SIZE_MSB:SIZE_LSB];
    235             1                        977                     unaligned_data            <= pop_data[DATA_MSB:DATA_LSB];
    236             1                        977                     unaligned_bytes_processed <= pop_data[SIZE_MSB:SIZE_LSB];
    237                                                              
    238                                                              //Already accept any future incomming unaligned data
    239             1                        977                     pop_ready                 <= 1;
    240                                                            end
    241                                                          end
    242                                                          else if((pop_valid == 1) && (pop_ready == 0)) begin
    243                                                            //Accept any incomming unaligned data
    244             1                    ***0***                   pop_ready <= 1;
    245                                                          end
    246                                                          else begin
    247                                                            //Already accept any incomming unaligned data
    248             1                       3547                   pop_ready <= 1;
    249                                                          end
    250                                                        end
    251                                                        else begin
    252                                                          //There is still some buffered unaligned bytes which can be processed
    253                                                          
    254                                                          if(unaligned_size - unaligned_bytes_processed >= (ctrl_size - aligned_bytes_processed)) begin
    255                                                            //There is enough information in the buffered unaligned data to send an aligned packet
    256                                                            
    257             1                    ***0***                   push_valid                       <= 1;
    258             1                    ***0***                   push_data[DATA_MSB:DATA_LSB]     <= push_data[DATA_MSB:DATA_LSB] | (((('h1 << ((ctrl_size - aligned_bytes_processed) * 8)) - 1) & (unaligned_data >> ((unaligned_offset + unaligned_bytes_processed) * 8))) << (8 * (ctrl_offset + aligned_bytes_processed)));
    259             1                    ***0***                   push_data[SIZE_MSB:SIZE_LSB]     <= ctrl_size;
    260             1                    ***0***                   push_data[OFFSET_MSB:OFFSET_LSB] <= ctrl_offset;
    261                                                            
    262             1                    ***0***                   unaligned_bytes_processed        <= unaligned_bytes_processed + ctrl_size - aligned_bytes_processed;
    263                                              
    264                                                            if(unaligned_bytes_processed + ctrl_size - aligned_bytes_processed >= unaligned_size) begin
    265                                                              //Already accept any incomming unaligned data
    266             1                    ***0***                     pop_ready <= 1;
    267                                                            end
    268                                                            else begin
    269             1                    ***0***                     pop_ready <= 0;
    270                                                            end
    271                                                          end
    272                                                          else begin
    273                                                            //There is no enough information on the buffered unaligned bytes to aligned it - just prepare what is available for alignment
    274                                                            
    275             1                          6                   push_valid                <= 0;
    276             1                          6                   push_data                 <= push_data | (((('h1 << ((unaligned_size - unaligned_bytes_processed) * 8)) - 1) & (unaligned_data >> ((unaligned_offset + unaligned_bytes_processed) * 8))) << (8 * (ctrl_offset + aligned_bytes_processed)));
    277             1                          6                   aligned_bytes_processed   <= aligned_bytes_processed + (unaligned_size - unaligned_bytes_processed) ;
    278                                                            
    279             1                          6                   unaligned_bytes_processed <= unaligned_size;
    280                                              
    281                                                            //Already accept any incomming unaligned data
    282             1                          6                   pop_ready <= 1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        256       254         2    99.21%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/ctrl --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                      aligned_bytes_processed[0-1]           1           1      100.00 
                        aligned_bytes_processed[2]           0           0        0.00 
                                               clk           3           3      100.00 
                                  ctrl_offset[0-1]           3           3      100.00 
                                    ctrl_size[0-1]           3           3      100.00 
                                      ctrl_size[2]           2           3      100.00 
                                    pop_data[0-36]           1           1      100.00 
                                         pop_ready           1           1      100.00 
                                         pop_valid           1           1      100.00 
                                   push_data[0-36]           1           1      100.00 
                                        push_ready           1           1      100.00 
                                        push_valid           1           1      100.00 
                                           reset_n           3           3      100.00 
                    unaligned_bytes_processed[0-2]           1           1      100.00 
                              unaligned_data[0-31]           1           1      100.00 
                             unaligned_offset[0-1]           1           1      100.00 
                               unaligned_size[0-2]           1           1      100.00 

Total Node Count     =        128 
Toggled Node Count   =        127 
Untoggled Node Count =          1 

Toggle Coverage      =      99.21% (254 of 256 bins)

=================================================================================
=== Instance: /DUT/core/regs/edge_detect_rx_fifo_empty
=== Design Unit: work.cfs_edge_detect
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_empty

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
------------------------------------IF Branch------------------------------------
    22                                     10712     Count coming in to IF
    22              1                          6           if(reset_n == 0) begin
    25              1                      10706           else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_empty --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
----------------Focused Expression View-----------------
Line       30 Item    1  (data & ~dly1_data)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        data         Y
   dly1_data         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  data_0                ~dly1_data                    
  Row   2:          1  data_1                ~dly1_data                    
  Row   3:          1  dly1_data_0           data                          
  Row   4:          3  dly1_data_1           data                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_empty --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
    11                                                 module cfs_edge_detect #(parameter bit EDGE = 1, parameter bit RESET_VAL = !EDGE)(
    12                                                   input clk,
    13                                                   input reset_n,
    14                                                   input data,
    15                                                   
    16                                                   output reg detected
    17                                                 );
    18                                                   
    19                                                   reg dly1_data;
    20                                                   
    21              1                      10712         always@(posedge clk or negedge reset_n) begin
    22                                                     if(reset_n == 0) begin
    23              1                          6             dly1_data <= RESET_VAL;
    24                                                     end
    25                                                     else begin
    26              1                      10706             dly1_data <= data;
    27                                                     end
    28                                                   end
    29                                                   
    30              1                      14233         assign detected = ((data == EDGE) & (dly1_data == !EDGE));

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_empty --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                              data           1           1      100.00 
                                          detected           1           1      100.00 
                                         dly1_data           1           1      100.00 
                                           reset_n           3           3      100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /DUT/core/regs/edge_detect_rx_fifo_full
=== Design Unit: work.cfs_edge_detect
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_full

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
------------------------------------IF Branch------------------------------------
    22                                        12     Count coming in to IF
    22              1                          6           if(reset_n == 0) begin
    25              1                          6           else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         0         2     0.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_full --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
----------------Focused Expression View-----------------
Line       30 Item    1  (data & ~dly1_data)
Expression totals: 0 of 2 input terms covered = 0.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        data         N  '_1' not hit             Hit '_1'
   dly1_data         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  data_0                ~dly1_data                    
  Row   2:    ***0***  data_1                ~dly1_data                    
  Row   3:    ***0***  dly1_data_0           data                          
  Row   4:    ***0***  dly1_data_1           data                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_full --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
    11                                                 module cfs_edge_detect #(parameter bit EDGE = 1, parameter bit RESET_VAL = !EDGE)(
    12                                                   input clk,
    13                                                   input reset_n,
    14                                                   input data,
    15                                                   
    16                                                   output reg detected
    17                                                 );
    18                                                   
    19                                                   reg dly1_data;
    20                                                   
    21              1                         12         always@(posedge clk or negedge reset_n) begin
    22                                                     if(reset_n == 0) begin
    23              1                          6             dly1_data <= RESET_VAL;
    24                                                     end
    25                                                     else begin
    26              1                          6             dly1_data <= data;
    27                                                     end
    28                                                   end
    29                                                   
    30              1                          9         assign detected = ((data == EDGE) & (dly1_data == !EDGE));

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10         4         6    40.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/regs/edge_detect_rx_fifo_full --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                              data           0           0        0.00 
                                          detected           0           0        0.00 
                                         dly1_data           0           0        0.00 
                                           reset_n           3           3      100.00 

Total Node Count     =          5 
Toggled Node Count   =          2 
Untoggled Node Count =          3 

Toggle Coverage      =      40.00% (4 of 10 bins)

=================================================================================
=== Instance: /DUT/core/regs/edge_detect_tx_fifo_empty
=== Design Unit: work.cfs_edge_detect
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_empty

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
------------------------------------IF Branch------------------------------------
    22                                      6086     Count coming in to IF
    22              1                          6           if(reset_n == 0) begin
    25              1                       6080           else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_empty --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
----------------Focused Expression View-----------------
Line       30 Item    1  (data & ~dly1_data)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        data         Y
   dly1_data         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  data_0                ~dly1_data                    
  Row   2:          1  data_1                ~dly1_data                    
  Row   3:          1  dly1_data_0           data                          
  Row   4:          3  dly1_data_1           data                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_empty --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
    11                                                 module cfs_edge_detect #(parameter bit EDGE = 1, parameter bit RESET_VAL = !EDGE)(
    12                                                   input clk,
    13                                                   input reset_n,
    14                                                   input data,
    15                                                   
    16                                                   output reg detected
    17                                                 );
    18                                                   
    19                                                   reg dly1_data;
    20                                                   
    21              1                       6086         always@(posedge clk or negedge reset_n) begin
    22                                                     if(reset_n == 0) begin
    23              1                          6             dly1_data <= RESET_VAL;
    24                                                     end
    25                                                     else begin
    26              1                       6080             dly1_data <= data;
    27                                                     end
    28                                                   end
    29                                                   
    30              1                       6201         assign detected = ((data == EDGE) & (dly1_data == !EDGE));

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_empty --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                              data           1           1      100.00 
                                          detected           1           1      100.00 
                                         dly1_data           1           1      100.00 
                                           reset_n           3           3      100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /DUT/core/regs/edge_detect_tx_fifo_full
=== Design Unit: work.cfs_edge_detect
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_full

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
------------------------------------IF Branch------------------------------------
    22                                      1326     Count coming in to IF
    22              1                          6           if(reset_n == 0) begin
    25              1                       1320           else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_full --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
----------------Focused Expression View-----------------
Line       30 Item    1  (data & ~dly1_data)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        data         Y
   dly1_data         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  data_0                ~dly1_data                    
  Row   2:          1  data_1                ~dly1_data                    
  Row   3:          1  dly1_data_0           data                          
  Row   4:          1  dly1_data_1           data                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_full --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
    11                                                 module cfs_edge_detect #(parameter bit EDGE = 1, parameter bit RESET_VAL = !EDGE)(
    12                                                   input clk,
    13                                                   input reset_n,
    14                                                   input data,
    15                                                   
    16                                                   output reg detected
    17                                                 );
    18                                                   
    19                                                   reg dly1_data;
    20                                                   
    21              1                       1326         always@(posedge clk or negedge reset_n) begin
    22                                                     if(reset_n == 0) begin
    23              1                          6             dly1_data <= RESET_VAL;
    24                                                     end
    25                                                     else begin
    26              1                       1320             dly1_data <= data;
    27                                                     end
    28                                                   end
    29                                                   
    30              1                       1765         assign detected = ((data == EDGE) & (dly1_data == !EDGE));

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/regs/edge_detect_tx_fifo_full --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                              data           1           1      100.00 
                                          detected           1           1      100.00 
                                         dly1_data           1           1      100.00 
                                           reset_n           3           3      100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /DUT/core/regs/edge_detect_max_drop
=== Design Unit: work.cfs_edge_detect
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                         2         2         0   100.00%

================================Branch Details================================

Branch Coverage for instance /DUT/core/regs/edge_detect_max_drop

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
------------------------------------IF Branch------------------------------------
    22                                        47     Count coming in to IF
    22              1                          9           if(reset_n == 0) begin
    25              1                         38           else begin
Branch totals: 2 hits of 2 branches = 100.00%


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      2         2         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/regs/edge_detect_max_drop --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
----------------Focused Expression View-----------------
Line       30 Item    1  (data & ~dly1_data)
Expression totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        data         Y
   dly1_data         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  data_0                ~dly1_data                    
  Row   2:          2  data_1                ~dly1_data                    
  Row   3:          2  dly1_data_0           data                          
  Row   4:          2  dly1_data_1           data                          


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                       4         4         0   100.00%

================================Statement Details================================

Statement Coverage for instance /DUT/core/regs/edge_detect_max_drop --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_edge_detect.v
    11                                                 module cfs_edge_detect #(parameter bit EDGE = 1, parameter bit RESET_VAL = !EDGE)(
    12                                                   input clk,
    13                                                   input reset_n,
    14                                                   input data,
    15                                                   
    16                                                   output reg detected
    17                                                 );
    18                                                   
    19                                                   reg dly1_data;
    20                                                   
    21              1                         47         always@(posedge clk or negedge reset_n) begin
    22                                                     if(reset_n == 0) begin
    23              1                          9             dly1_data <= RESET_VAL;
    24                                                     end
    25                                                     else begin
    26              1                         38             dly1_data <= data;
    27                                                     end
    28                                                   end
    29                                                   
    30              1                         41         assign detected = ((data == EDGE) & (dly1_data == !EDGE));

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                         10        10         0   100.00%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/regs/edge_detect_max_drop --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                              data           2           2      100.00 
                                          detected           2           2      100.00 
                                         dly1_data           2           2      100.00 
                                           reset_n           3           3      100.00 

Total Node Count     =          5 
Toggled Node Count   =          5 
Untoggled Node Count =          0 

Toggle Coverage      =     100.00% (10 of 10 bins)

=================================================================================
=== Instance: /DUT/core/regs
=== Design Unit: work.cfs_regs
=================================================================================
Branch Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Branches                        35        29         6    82.85%

================================Branch Details================================

Branch Coverage for instance /DUT/core/regs

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_regs.v
------------------------------------IF Branch------------------------------------
    172                                    25907     Count coming in to IF
    172             1                          9           if(presetn == 0) begin
    192             1                      25898           else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    195                                    25898     Count coming in to IF
    195             1                       3828             if(psel == 1 && penable == 1) begin
    296             1                      22070             else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    196                                     3828     Count coming in to IF
    196             1                       1914               if(pready == 0) begin
    290             1                       1914               else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------CASE Branch------------------------------------
    197                                     1914     Count coming in to CASE
    198             1                        273                   ADDR_CTRL : begin
    237             1                        137                   ADDR_STATUS : begin
    249             1                        244                   ADDR_IRQEN : begin
    266             1                        260                   ADDR_IRQ : begin
    283             1                       1000                   default : begin
Branch totals: 5 hits of 5 branches = 100.00%

------------------------------------IF Branch------------------------------------
    199                                      273     Count coming in to IF
    199             1                        132                     if(pwrite) begin
    232             1                        141                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    200                                      132     Count coming in to IF
    200             1                        132                       if(wr_ctrl_is_illegal == 0) begin
    226             1                    ***0***                       else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    201                                      132     Count coming in to IF
    201             1                    ***0***                         if(ctrl_size_wr_val == 0) begin
    206             1                    ***0***                         else if(((ALGN_DATA_WIDTH / 8) + ctrl_offset_wr_val) % ctrl_size_wr_val != 0) begin
    211             1                    ***0***                         else if(ctrl_offset_wr_val + ctrl_size_wr_val > (ALGN_DATA_WIDTH / 8)) begin
    216             1                        132                         else begin
Branch totals: 1 hit of 4 branches = 25.00%

------------------------------------IF Branch------------------------------------
    238                                      137     Count coming in to IF
    238             1                    ***0***                     if(pwrite) begin
    243             1                        137                     else begin
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    250                                      244     Count coming in to IF
    250             1                        127                     if(pwrite) begin
    260             1                        117                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    267                                      260     Count coming in to IF
    267             1                        138                     if(pwrite) begin
    277             1                        122                     else begin
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    302                                    25898     Count coming in to IF
    302             1                       3556             if(edge_rx_fifo_empty) begin
                                           22342     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    306                                    25898     Count coming in to IF
    306             1                    ***0***             if(edge_rx_fifo_full) begin
                                           25898     All False Count
Branch totals: 1 hit of 2 branches = 50.00%

------------------------------------IF Branch------------------------------------
    310                                    25898     Count coming in to IF
    310             1                       1548             if(edge_tx_fifo_empty) begin
                                           24350     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    314                                    25898     Count coming in to IF
    314             1                        439             if(edge_tx_fifo_full) begin
                                           25459     All False Count
Branch totals: 2 hits of 2 branches = 100.00%

------------------------------------IF Branch------------------------------------
    318                                    25898     Count coming in to IF
    318             1                          9             if(edge_max_drop) begin
                                           25889     All False Count
Branch totals: 2 hits of 2 branches = 100.00%


Condition Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Conditions                       5         2         3    40.00%

================================Condition Details================================

Condition Coverage for instance /DUT/core/regs --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_regs.v
----------------Focused Condition View-------------------
Line       195 Item    1  (psel && penable)
Condition totals: 2 of 2 input terms covered = 100.00%

  Input Term   Covered  Reason for no coverage   Hint
 -----------  --------  -----------------------  --------------
        psel         Y
     penable         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  psel_0                -                             
  Row   2:          3  psel_1                penable                       
  Row   3:          3  penable_0             psel                          
  Row   4:          3  penable_1             psel                          

----------------Focused Condition View-------------------
Line       201 Item    1  (ctrl_size_wr_val == 0)
Condition totals: 0 of 1 input term covered = 0.00%

               Input Term   Covered  Reason for no coverage   Hint
              -----------  --------  -----------------------  --------------
  (ctrl_size_wr_val == 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                 Non-masking condition(s)      
 ---------  ---------  --------------------       -------------------------     
  Row   1:          3  (ctrl_size_wr_val == 0)_0  -                             
  Row   2:    ***0***  (ctrl_size_wr_val == 0)_1  -                             

----------------Focused Condition View-------------------
Line       206 Item    1  ((((32 / 8) + ctrl_offset_wr_val) % ctrl_size_wr_val) != 0)
Condition totals: 0 of 1 input term covered = 0.00%

                                                   Input Term   Covered  Reason for no coverage   Hint
                                                  -----------  --------  -----------------------  --------------
  ((((32 / 8) + ctrl_offset_wr_val) % ctrl_size_wr_val) != 0)         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                                     Non-masking condition(s)      
 ---------  ---------  --------------------                                           -------------------------     
  Row   1:          3  ((((32 / 8) + ctrl_offset_wr_val) % ctrl_size_wr_val) != 0)_0  -                             
  Row   2:    ***0***  ((((32 / 8) + ctrl_offset_wr_val) % ctrl_size_wr_val) != 0)_1  -                             

----------------Focused Condition View-------------------
Line       211 Item    1  ((ctrl_offset_wr_val + ctrl_size_wr_val) > (32 / 8))
Condition totals: 0 of 1 input term covered = 0.00%

                                            Input Term   Covered  Reason for no coverage   Hint
                                           -----------  --------  -----------------------  --------------
  ((ctrl_offset_wr_val + ctrl_size_wr_val) > (32 / 8))         N  '_1' not hit             Hit '_1'

     Rows:       Hits  FEC Target                                              Non-masking condition(s)      
 ---------  ---------  --------------------                                    -------------------------     
  Row   1:          3  ((ctrl_offset_wr_val + ctrl_size_wr_val) > (32 / 8))_0  -                             
  Row   2:    ***0***  ((ctrl_offset_wr_val + ctrl_size_wr_val) > (32 / 8))_1  -                             


Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                     20        16         4    80.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core/regs --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_regs.v
----------------Focused Expression View-----------------
Line       165 Item    1  (((((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) | (edge_tx_fifo_full & irqen_tx_fifo_full)) | (edge_max_drop & irqen_max_drop))
Expression totals: 8 of 10 input terms covered = 80.00%

           Input Term   Covered  Reason for no coverage   Hint
          -----------  --------  -----------------------  --------------
   edge_rx_fifo_empty         Y
  irqen_rx_fifo_empty         Y
    edge_rx_fifo_full         N  '_1' not hit             Hit '_1'
   irqen_rx_fifo_full         N  No hits                  Hit '_0' and '_1'
   edge_tx_fifo_empty         Y
  irqen_tx_fifo_empty         Y
    edge_tx_fifo_full         Y
   irqen_tx_fifo_full         Y
        edge_max_drop         Y
       irqen_max_drop         Y

     Rows:       Hits  FEC Target             Non-masking condition(s)      
 ---------  ---------  --------------------   -------------------------     
  Row   1:          3  edge_rx_fifo_empty_0   (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_full & irqen_rx_fifo_full) && irqen_rx_fifo_empty)
  Row   2:          1  edge_rx_fifo_empty_1   (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_full & irqen_rx_fifo_full) && irqen_rx_fifo_empty)
  Row   3:          1  irqen_rx_fifo_empty_0  (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_full & irqen_rx_fifo_full) && edge_rx_fifo_empty)
  Row   4:          1  irqen_rx_fifo_empty_1  (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_full & irqen_rx_fifo_full) && edge_rx_fifo_empty)
  Row   5:          3  edge_rx_fifo_full_0    (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_empty & irqen_rx_fifo_empty) && irqen_rx_fifo_full)
  Row   6:    ***0***  edge_rx_fifo_full_1    (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_empty & irqen_rx_fifo_empty) && irqen_rx_fifo_full)
  Row   7:    ***0***  irqen_rx_fifo_full_0   (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_empty & irqen_rx_fifo_empty) && edge_rx_fifo_full)
  Row   8:    ***0***  irqen_rx_fifo_full_1   (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~(edge_tx_fifo_empty & irqen_tx_fifo_empty) && ~(edge_rx_fifo_empty & irqen_rx_fifo_empty) && edge_rx_fifo_full)
  Row   9:          3  edge_tx_fifo_empty_0   (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) && irqen_tx_fifo_empty)
 Row   10:          1  edge_tx_fifo_empty_1   (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) && irqen_tx_fifo_empty)
 Row   11:          1  irqen_tx_fifo_empty_0  (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) && edge_tx_fifo_empty)
 Row   12:          1  irqen_tx_fifo_empty_1  (~(edge_max_drop & irqen_max_drop) && ~(edge_tx_fifo_full & irqen_tx_fifo_full) && ~((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) && edge_tx_fifo_empty)
 Row   13:          3  edge_tx_fifo_full_0    (~(edge_max_drop & irqen_max_drop) && ~(((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) && irqen_tx_fifo_full)
 Row   14:          1  edge_tx_fifo_full_1    (~(edge_max_drop & irqen_max_drop) && ~(((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) && irqen_tx_fifo_full)
 Row   15:          1  irqen_tx_fifo_full_0   (~(edge_max_drop & irqen_max_drop) && ~(((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) && edge_tx_fifo_full)
 Row   16:          1  irqen_tx_fifo_full_1   (~(edge_max_drop & irqen_max_drop) && ~(((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) && edge_tx_fifo_full)
 Row   17:          3  edge_max_drop_0        (~((((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) | (edge_tx_fifo_full & irqen_tx_fifo_full)) && irqen_max_drop)
 Row   18:          2  edge_max_drop_1        (~((((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) | (edge_tx_fifo_full & irqen_tx_fifo_full)) && irqen_max_drop)
 Row   19:          1  irqen_max_drop_0       (~((((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) | (edge_tx_fifo_full & irqen_tx_fifo_full)) && edge_max_drop)
 Row   20:          2  irqen_max_drop_1       (~((((edge_rx_fifo_empty & irqen_rx_fifo_empty) | (edge_rx_fifo_full & irqen_rx_fifo_full)) | (edge_tx_fifo_empty & irqen_tx_fifo_empty)) | (edge_tx_fifo_full & irqen_tx_fifo_full)) && edge_max_drop)

----------------Focused Expression View-----------------
Line       271 Item    1  (irq_rx_fifo_empty & ~pwdata[0])
Expression totals: 2 of 2 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  irq_rx_fifo_empty         Y
          pwdata[0]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          2  irq_rx_fifo_empty_0   ~pwdata[0]                    
  Row   2:          1  irq_rx_fifo_empty_1   ~pwdata[0]                    
  Row   3:          1  pwdata[0]_0           irq_rx_fifo_empty             
  Row   4:          1  pwdata[0]_1           irq_rx_fifo_empty             

----------------Focused Expression View-----------------
Line       272 Item    1  (irq_rx_fifo_full & ~pwdata[1])
Expression totals: 0 of 2 input terms covered = 0.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  irq_rx_fifo_full         N  '_1' not hit             Hit '_1'
         pwdata[1]         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  irq_rx_fifo_full_0    ~pwdata[1]                    
  Row   2:    ***0***  irq_rx_fifo_full_1    ~pwdata[1]                    
  Row   3:    ***0***  pwdata[1]_0           irq_rx_fifo_full              
  Row   4:    ***0***  pwdata[1]_1           irq_rx_fifo_full              

----------------Focused Expression View-----------------
Line       273 Item    1  (irq_tx_fifo_empty & ~pwdata[2])
Expression totals: 2 of 2 input terms covered = 100.00%

         Input Term   Covered  Reason for no coverage   Hint
        -----------  --------  -----------------------  --------------
  irq_tx_fifo_empty         Y
          pwdata[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          3  irq_tx_fifo_empty_0   ~pwdata[2]                    
  Row   2:          1  irq_tx_fifo_empty_1   ~pwdata[2]                    
  Row   3:          1  pwdata[2]_0           irq_tx_fifo_empty             
  Row   4:          1  pwdata[2]_1           irq_tx_fifo_empty             

----------------Focused Expression View-----------------
Line       274 Item    1  (irq_tx_fifo_full & ~pwdata[3])
Expression totals: 2 of 2 input terms covered = 100.00%

        Input Term   Covered  Reason for no coverage   Hint
       -----------  --------  -----------------------  --------------
  irq_tx_fifo_full         Y
         pwdata[3]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          2  irq_tx_fifo_full_0    ~pwdata[3]                    
  Row   2:          1  irq_tx_fifo_full_1    ~pwdata[3]                    
  Row   3:          1  pwdata[3]_0           irq_tx_fifo_full              
  Row   4:          1  pwdata[3]_1           irq_tx_fifo_full              

----------------Focused Expression View-----------------
Line       275 Item    1  (irq_max_drop & ~pwdata[4])
Expression totals: 2 of 2 input terms covered = 100.00%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  irq_max_drop         Y
     pwdata[4]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          2  irq_max_drop_0        ~pwdata[4]                    
  Row   2:          2  irq_max_drop_1        ~pwdata[4]                    
  Row   3:          2  pwdata[4]_0           irq_max_drop                  
  Row   4:          2  pwdata[4]_1           irq_max_drop                  


Statement Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Statements                     101        85        16    84.15%

================================Statement Details================================

Statement Coverage for instance /DUT/core/regs --

    Line         Item                      Count     Source 
    ----         ----                      -----     ------ 
  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_regs.v
    17                                                 module cfs_regs#(
    18                                                   parameter APB_ADDR_WIDTH        = 16,
    19                                                   parameter ALGN_DATA_WIDTH       = 32,
    20                                                   
    21                                                   parameter STATUS_CNT_DROP_WIDTH = 8,
    22                                                   parameter STATUS_RX_LVL_WIDTH   = 4,
    23                                                   parameter STATUS_TX_LVL_WIDTH   = 4,
    24                                                   
    25                                                   localparam int unsigned APB_DATA_WIDTH  = 32,
    26                                                   localparam int unsigned ALGN_OFFSET_WIDTH = ALGN_DATA_WIDTH <= 8 ? 1 : $clog2(ALGN_DATA_WIDTH/8),
    27                                                   localparam int unsigned ALGN_SIZE_WIDTH   = $clog2(ALGN_DATA_WIDTH/8)+1) (
    28                                                   
    29                                                   input wire                            pclk,
    30                                                   input wire                            presetn,
    31                                               
    32                                                   input wire[APB_ADDR_WIDTH-1:0]        paddr,
    33                                                   input wire                            pwrite,
    34                                                   input wire                            psel,
    35                                                   input wire                            penable,
    36                                                   input wire[APB_DATA_WIDTH-1:0]        pwdata,
    37                                                   output reg                            pready,
    38                                                   output reg[APB_DATA_WIDTH-1:0]        prdata,
    39                                                   output reg                            pslverr,
    40                                                     
    41                                                   output reg[ALGN_OFFSET_WIDTH-1:0]     ctrl_offset,
    42                                                   output reg[ALGN_SIZE_WIDTH-1:0]       ctrl_size,
    43                                                   output reg                            ctrl_clr,
    44                                                   
    45                                                   input wire[STATUS_CNT_DROP_WIDTH-1:0] status_cnt_drop,
    46                                                   input wire[STATUS_RX_LVL_WIDTH-1:0]   status_rx_lvl,
    47                                                   input wire[STATUS_TX_LVL_WIDTH-1:0]   status_tx_lvl,
    48                                                   
    49                                                   input wire                            rx_fifo_empty,
    50                                                   input wire                            rx_fifo_full,
    51                                                   input wire                            tx_fifo_empty,
    52                                                   input wire                            tx_fifo_full,
    53                                                   input wire                            max_drop,
    54                                                   
    55                                                   output wire                           irq
    56                                                 );
    57                                                   
    58                                                   localparam ADDR_CTRL    = 'h0000;
    59                                                   localparam ADDR_STATUS  = 'h000c;
    60                                                   localparam ADDR_IRQEN   = 'h00f0;
    61                                                   localparam ADDR_IRQ     = 'h00f4;
    62                                                   
    63                                                   localparam LSB_CTRL_SIZE   = 0;
    64                                                   localparam LSB_CTRL_OFFSET = 8;
    65                                                   localparam LSB_CTRL_CLR    = 16;
    66                                                   
    67                                                   localparam LSB_STATUS_CNT_DROP = 0;
    68                                                   localparam LSB_STATUS_RX_LVL   = 8;
    69                                                   localparam LSB_STATUS_TX_LVL   = 16;
    70                                                   
    71                                                   localparam LSB_IRQEN_RX_FIFO_EMPTY = 0;
    72                                                   localparam LSB_IRQEN_RX_FIFO_FULL  = 1;
    73                                                   localparam LSB_IRQEN_TX_FIFO_EMPTY = 2;
    74                                                   localparam LSB_IRQEN_TX_FIFO_FULL  = 3;
    75                                                   localparam LSB_IRQEN_MAX_DROP      = 4;
    76                                                   
    77                                                   localparam LSB_IRQ_RX_FIFO_EMPTY = LSB_IRQEN_RX_FIFO_EMPTY;
    78                                                   localparam LSB_IRQ_RX_FIFO_FULL  = LSB_IRQEN_RX_FIFO_FULL;
    79                                                   localparam LSB_IRQ_TX_FIFO_EMPTY = LSB_IRQEN_TX_FIFO_EMPTY;
    80                                                   localparam LSB_IRQ_TX_FIFO_FULL  = LSB_IRQEN_TX_FIFO_FULL;
    81                                                   localparam LSB_IRQ_MAX_DROP      = LSB_IRQEN_MAX_DROP;
    82                                                   
    83                                                   wire[APB_ADDR_WIDTH-1:0] addr_aligned;
    84                                                 
    85              1                       3288         assign addr_aligned = {paddr[APB_ADDR_WIDTH-1:2], 2'b00};
    86                                                   
    87                                                   reg wr_ctrl_is_illegal;
    88                                                   
    89                                                   wire[ALGN_SIZE_WIDTH-1:0] ctrl_size_wr_val;
    90                                                   
    91                                                   assign ctrl_size_wr_val = pwdata[LSB_CTRL_SIZE + ALGN_SIZE_WIDTH - 1 : LSB_CTRL_SIZE];
    92                                                                     
    93                                                   wire[ALGN_OFFSET_WIDTH-1:0] ctrl_offset_wr_val;
    94                                                   
    95                                                   assign ctrl_offset_wr_val = pwdata[LSB_CTRL_OFFSET + ALGN_OFFSET_WIDTH - 1 : LSB_CTRL_OFFSET];
    96                                                   
    97                                                   reg[APB_DATA_WIDTH-1:0] ctrl_rd_val;
    98                                                   
    99                                                   reg irqen_rx_fifo_empty;
    100                                                  reg irqen_rx_fifo_full;
    101                                                  reg irqen_tx_fifo_empty;
    102                                                  reg irqen_tx_fifo_full;
    103                                                  reg irqen_max_drop;
    104                                                  
    105                                                  reg irq_rx_fifo_empty;
    106                                                  reg irq_rx_fifo_full;
    107                                                  reg irq_tx_fifo_empty;
    108                                                  reg irq_tx_fifo_full;
    109                                                  reg irq_max_drop;
    110                                                  
    111             1                        121         always_comb begin
    112             1                        121           ctrl_rd_val = 0;
    113                                                    
    114             1                        121           ctrl_rd_val[LSB_CTRL_SIZE   + ALGN_SIZE_WIDTH   - 1 : LSB_CTRL_SIZE]   = ctrl_size;
    115             1                        121           ctrl_rd_val[LSB_CTRL_OFFSET + ALGN_OFFSET_WIDTH - 1 : LSB_CTRL_OFFSET] = ctrl_offset;
    116                                                  end
    117                                                  
    118                                                  reg[APB_DATA_WIDTH-1:0] status_rd_val;
    119                                                  
    120             1                      15818         always_comb begin
    121             1                      15818           status_rd_val = 0;
    122                                                    
    123             1                      15818           status_rd_val[LSB_STATUS_CNT_DROP+ STATUS_CNT_DROP_WIDTH-1:LSB_STATUS_CNT_DROP] = status_cnt_drop;
    124             1                      15818           status_rd_val[LSB_STATUS_RX_LVL  + STATUS_RX_LVL_WIDTH-1  :LSB_STATUS_RX_LVL]   = status_rx_lvl;
    125             1                      15818           status_rd_val[LSB_STATUS_TX_LVL  + STATUS_TX_LVL_WIDTH-1  :LSB_STATUS_TX_LVL]   = status_tx_lvl;
    126                                                  end
    127                                                  
    128                                                  reg[APB_DATA_WIDTH-1:0] irqen_rd_val;
    129                                                  
    130             1                        133         always_comb begin
    131             1                        133           irqen_rd_val = 0;
    132                                                    
    133             1                        133           irqen_rd_val[LSB_IRQEN_RX_FIFO_EMPTY] = irqen_rx_fifo_empty;
    134             1                        133           irqen_rd_val[LSB_IRQEN_RX_FIFO_FULL]  = irqen_rx_fifo_full;
    135             1                        133           irqen_rd_val[LSB_IRQEN_TX_FIFO_EMPTY] = irqen_tx_fifo_empty;
    136             1                        133           irqen_rd_val[LSB_IRQEN_TX_FIFO_FULL]  = irqen_tx_fifo_full;
    137             1                        133           irqen_rd_val[LSB_IRQEN_MAX_DROP]      = irqen_max_drop;
    138                                                  end
    139                                                  
    140                                                  reg[APB_DATA_WIDTH-1:0] irq_rd_val;
    141                                                  
    142             1                         24         always_comb begin
    143             1                         24           irq_rd_val = 0;
    144                                                    
    145             1                         24           irq_rd_val[LSB_IRQEN_RX_FIFO_EMPTY] = irq_rx_fifo_empty;
    146             1                         24           irq_rd_val[LSB_IRQEN_RX_FIFO_FULL]  = irq_rx_fifo_full;
    147             1                         24           irq_rd_val[LSB_IRQEN_TX_FIFO_EMPTY] = irq_tx_fifo_empty;
    148             1                         24           irq_rd_val[LSB_IRQEN_TX_FIFO_FULL]  = irq_tx_fifo_full;
    149             1                         24           irq_rd_val[LSB_IRQEN_MAX_DROP]      = irq_max_drop;
    150                                                  end
    151                                                  
    152                                                  wire edge_rx_fifo_empty;
    153                                                  wire edge_rx_fifo_full;
    154                                                  wire edge_tx_fifo_empty;
    155                                                  wire edge_tx_fifo_full;
    156                                                  wire edge_max_drop;
    157                                                  
    158                                                  cfs_edge_detect #(.EDGE(1), .RESET_VAL(1)) edge_detect_rx_fifo_empty(.clk(pclk), .reset_n(presetn), .data(rx_fifo_empty), .detected(edge_rx_fifo_empty));
    159                                                  cfs_edge_detect #(.EDGE(1), .RESET_VAL(0)) edge_detect_rx_fifo_full( .clk(pclk), .reset_n(presetn), .data(rx_fifo_full),  .detected(edge_rx_fifo_full));
    160                                                  cfs_edge_detect #(.EDGE(1), .RESET_VAL(1)) edge_detect_tx_fifo_empty(.clk(pclk), .reset_n(presetn), .data(tx_fifo_empty), .detected(edge_tx_fifo_empty));
    161                                                  cfs_edge_detect #(.EDGE(1), .RESET_VAL(0)) edge_detect_tx_fifo_full( .clk(pclk), .reset_n(presetn), .data(tx_fifo_full),  .detected(edge_tx_fifo_full));
    162                                                  cfs_edge_detect #(.EDGE(1), .RESET_VAL(0)) edge_detect_max_drop(     .clk(pclk), .reset_n(presetn), .data(max_drop),      .detected(edge_max_drop));
    163                                                  
    164             1                      10858         assign irq = 
    165                                                    (edge_rx_fifo_empty & irqen_rx_fifo_empty) | 
    166                                                    (edge_rx_fifo_full  & irqen_rx_fifo_full)  | 
    167                                                    (edge_tx_fifo_empty & irqen_tx_fifo_empty) | 
    168                                                    (edge_tx_fifo_full  & irqen_tx_fifo_full)  | 
    169                                                    (edge_max_drop      & irqen_max_drop);
    170                                                  
    171             1                      25907         always@(posedge pclk or negedge presetn) begin
    172                                                    if(presetn == 0) begin
    173             1                          9             ctrl_offset <= 0;
    174             1                          9             ctrl_size   <= 1;
    175                                                      
    176             1                          9             irqen_rx_fifo_empty <= 0;
    177             1                          9             irqen_rx_fifo_full  <= 0;
    178             1                          9             irqen_tx_fifo_empty <= 0;
    179             1                          9             irqen_tx_fifo_full  <= 0;
    180             1                          9             irqen_max_drop      <= 0;
    181                                                      
    182             1                          9             irq_rx_fifo_empty <= 0;
    183             1                          9             irq_rx_fifo_full  <= 0;
    184             1                          9             irq_tx_fifo_empty <= 0;
    185             1                          9             irq_tx_fifo_full  <= 0;
    186             1                          9             irq_max_drop      <= 0;
    187                                                      
    188             1                          9             wr_ctrl_is_illegal <= 0;
    189                                                      
    190             1                          9             ctrl_clr           <= 0;
    191                                                    end
    192                                                    else begin
    193             1                      25898             ctrl_clr <= 0;
    194                                                      
    195                                                      if(psel == 1 && penable == 1) begin
    196                                                        if(pready == 0) begin
    197                                                          case(addr_aligned) 
    198                                                            ADDR_CTRL : begin
    199                                                              if(pwrite) begin
    200                                                                if(wr_ctrl_is_illegal == 0) begin
    201                                                                  if(ctrl_size_wr_val == 0) begin
    202             1                    ***0***                           wr_ctrl_is_illegal <= 1;
    203             1                    ***0***                           pready             <= 0;
    204             1                    ***0***                           pslverr            <= 0;
    205                                                                  end
    206                                                                  else if(((ALGN_DATA_WIDTH / 8) + ctrl_offset_wr_val) % ctrl_size_wr_val != 0) begin
    207             1                    ***0***                           wr_ctrl_is_illegal <= 1;
    208             1                    ***0***                           pready             <= 0;
    209             1                    ***0***                           pslverr            <= 0;
    210                                                                  end
    211                                                                  else if(ctrl_offset_wr_val + ctrl_size_wr_val > (ALGN_DATA_WIDTH / 8)) begin
    212             1                    ***0***                           wr_ctrl_is_illegal <= 1;
    213             1                    ***0***                           pready             <= 0;
    214             1                    ***0***                           pslverr            <= 0;
    215                                                                  end
    216                                                                  else begin
    217             1                        132                           wr_ctrl_is_illegal <= 0;
    218             1                        132                           pready             <= 1;
    219             1                        132                           pslverr            <= 0;
    220                                                                    
    221             1                        132                           ctrl_size          <= ctrl_size_wr_val;
    222             1                        132                           ctrl_offset        <= ctrl_offset_wr_val;
    223             1                        132                           ctrl_clr           <= pwdata[LSB_CTRL_CLR];
    224                                                                  end
    225                                                                end
    226                                                                else begin
    227             1                    ***0***                         wr_ctrl_is_illegal <= 0;
    228             1                    ***0***                         pready             <= 1;
    229             1                    ***0***                         pslverr            <= 1;
    230                                                                end
    231                                                              end
    232                                                              else begin
    233             1                        141                       prdata <= ctrl_rd_val;
    234             1                        141                       pready <= 1;
    235                                                              end
    236                                                            end
    237                                                            ADDR_STATUS : begin
    238                                                              if(pwrite) begin
    239             1                    ***0***                       pready  <= 1;
    240             1                    ***0***                       pslverr <= 1;
    241             1                    ***0***                       prdata  <= 0;
    242                                                              end
    243                                                              else begin
    244             1                        137                       pready  <= 1;
    245             1                        137                       pslverr <= 0;
    246             1                        137                       prdata  <= status_rd_val;
    247                                                              end
    248                                                            end
    249                                                            ADDR_IRQEN : begin
    250                                                              if(pwrite) begin
    251             1                        127                       pready  <= 1;
    252             1                        127                       pslverr <= 0;
    253                                                                
    254             1                        127                       irqen_rx_fifo_empty <= pwdata[LSB_IRQEN_RX_FIFO_EMPTY];
    255             1                        127                       irqen_rx_fifo_full  <= pwdata[LSB_IRQEN_RX_FIFO_FULL];
    256             1                        127                       irqen_tx_fifo_empty <= pwdata[LSB_IRQEN_TX_FIFO_EMPTY];
    257             1                        127                       irqen_tx_fifo_full  <= pwdata[LSB_IRQEN_TX_FIFO_FULL];
    258             1                        127                       irqen_max_drop      <= pwdata[LSB_IRQEN_MAX_DROP];
    259                                                              end
    260                                                              else begin
    261             1                        117                       pready  <= 1;
    262             1                        117                       pslverr <= 0;
    263             1                        117                       prdata  <= irqen_rd_val;
    264                                                              end
    265                                                            end
    266                                                            ADDR_IRQ : begin
    267                                                              if(pwrite) begin
    268             1                        138                       pready  <= 1;
    269             1                        138                       pslverr <= 0;
    270                                                                
    271             1                        138                       irq_rx_fifo_empty <= irq_rx_fifo_empty & !pwdata[LSB_IRQEN_RX_FIFO_EMPTY];
    272             1                        138                       irq_rx_fifo_full  <= irq_rx_fifo_full  & !pwdata[LSB_IRQEN_RX_FIFO_FULL];
    273             1                        138                       irq_tx_fifo_empty <= irq_tx_fifo_empty & !pwdata[LSB_IRQEN_TX_FIFO_EMPTY];
    274             1                        138                       irq_tx_fifo_full  <= irq_tx_fifo_full  & !pwdata[LSB_IRQEN_TX_FIFO_FULL];
    275             1                        138                       irq_max_drop      <= irq_max_drop      & !pwdata[LSB_IRQEN_MAX_DROP];
    276                                                              end
    277                                                              else begin
    278             1                        122                       pready  <= 1;
    279             1                        122                       pslverr <= 0;
    280             1                        122                       prdata  <= irq_rd_val;
    281                                                              end
    282                                                            end
    283                                                            default : begin
    284             1                       1000                     pready  <= 1;
    285             1                       1000                     pslverr <= 1;
    286             1                       1000                     prdata  <= 0;
    287                                                            end
    288                                                          endcase
    289                                                        end
    290                                                        else begin
    291             1                       1914                 pready  <= 0;
    292             1                       1914                 pslverr <= 0;
    293             1                       1914                 prdata  <= 0;
    294                                                        end
    295                                                      end
    296                                                      else begin
    297             1                      22070               pready  <= 0;
    298             1                      22070               pslverr <= 0;
    299             1                      22070               prdata  <= 0;
    300                                                      end
    301                                                      
    302                                                      if(edge_rx_fifo_empty) begin
    303             1                       3556               irq_rx_fifo_empty <= 1;
    304                                                      end
    305                                                      
    306                                                      if(edge_rx_fifo_full) begin
    307             1                    ***0***               irq_rx_fifo_full <= 1;
    308                                                      end
    309                                                      
    310                                                      if(edge_tx_fifo_empty) begin
    311             1                       1548               irq_tx_fifo_empty <= 1;
    312                                                      end
    313                                                      
    314                                                      if(edge_tx_fifo_full) begin
    315             1                        439               irq_tx_fifo_full <= 1;
    316                                                      end
    317                                                      
    318                                                      if(edge_max_drop) begin
    319             1                          9               irq_max_drop <= 1;

Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        560       304       256    54.28%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core/regs --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                 addr_aligned[0-1]           0           0        0.00 
                                 addr_aligned[2-7]           3           3      100.00 
                                addr_aligned[8-15]           1           1      100.00 
                                          ctrl_clr           3           3      100.00 
                                  ctrl_offset[0-1]           3           3      100.00 
                           ctrl_offset_wr_val[0-1]           3           3      100.00 
                                  ctrl_rd_val[0-1]           3           3      100.00 
                                    ctrl_rd_val[2]           2           3      100.00 
                                  ctrl_rd_val[3-7]           0           0        0.00 
                                  ctrl_rd_val[8-9]           3           3      100.00 
                                ctrl_rd_val[10-31]           0           0        0.00 
                                    ctrl_size[0-1]           3           3      100.00 
                                      ctrl_size[2]           2           3      100.00 
                             ctrl_size_wr_val[0-2]           3           3      100.00 
                                     edge_max_drop           2           2      100.00 
                                edge_rx_fifo_empty           1           1      100.00 
                                 edge_rx_fifo_full           0           0        0.00 
                                edge_tx_fifo_empty           1           1      100.00 
                                 edge_tx_fifo_full           1           1      100.00 
                                               irq           2           2      100.00 
                                      irq_max_drop           2           2      100.00 
                                     irq_rd_val[0]           1           1      100.00 
                                     irq_rd_val[1]           0           0        0.00 
                                   irq_rd_val[2-3]           1           1      100.00 
                                     irq_rd_val[4]           2           2      100.00 
                                  irq_rd_val[5-31]           0           0        0.00 
                                 irq_rx_fifo_empty           1           1      100.00 
                                  irq_rx_fifo_full           0           0        0.00 
                                 irq_tx_fifo_empty           1           1      100.00 
                                  irq_tx_fifo_full           1           1      100.00 
                                    irqen_max_drop           3           3      100.00 
                                 irqen_rd_val[0-4]           3           3      100.00 
                                irqen_rd_val[5-31]           0           0        0.00 
                               irqen_rx_fifo_empty           3           3      100.00 
                                irqen_rx_fifo_full           3           3      100.00 
                               irqen_tx_fifo_empty           3           3      100.00 
                                irqen_tx_fifo_full           3           3      100.00 
                                          max_drop           2           2      100.00 
                                        paddr[0-1]           1           1      100.00 
                                        paddr[2-7]           3           3      100.00 
                                       paddr[8-15]           1           1      100.00 
                                              pclk           3           3      100.00 
                                           penable           3           3      100.00 
                                       prdata[0-4]           3           3      100.00 
                                       prdata[5-7]           2           2      100.00 
                                       prdata[8-9]           1           1      100.00 
                                     prdata[10-31]           0           0        0.00 
                                            pready           3           3      100.00 
                                           presetn           3           3      100.00 
                                              psel           3           3      100.00 
                                           pslverr           1           1      100.00 
                                       pwdata[0-4]           3           3      100.00 
                                       pwdata[5-7]           1           1      100.00 
                                       pwdata[8-9]           3           3      100.00 
                                     pwdata[10-15]           1           1      100.00 
                                        pwdata[16]           3           3      100.00 
                                     pwdata[17-31]           1           1      100.00 
                                            pwrite           3           3      100.00 
                                     rx_fifo_empty           1           1      100.00 
                                      rx_fifo_full           0           0        0.00 
                              status_cnt_drop[0-7]           2           2      100.00 
                                status_rd_val[0-7]           2           2      100.00 
                               status_rd_val[8-10]           1           1      100.00 
                              status_rd_val[11-15]           0           0        0.00 
                              status_rd_val[16-19]           1           1      100.00 
                              status_rd_val[20-31]           0           0        0.00 
                                status_rx_lvl[0-2]           1           1      100.00 
                                  status_rx_lvl[3]           0           0        0.00 
                                status_tx_lvl[0-3]           1           1      100.00 
                                     tx_fifo_empty           1           1      100.00 
                                      tx_fifo_full           1           1      100.00 
                                wr_ctrl_is_illegal           0           0        0.00 

Total Node Count     =        280 
Toggled Node Count   =        152 
Untoggled Node Count =        128 

Toggle Coverage      =      54.28% (304 of 560 bins)

=================================================================================
=== Instance: /DUT/core
=== Design Unit: work.cfs_aligner_core
=================================================================================

Assertion Coverage:
    Assertions                       3         3         0   100.00%
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/DUT/core/#ublk#167905109#187/immed__196
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v(196)
                                                        0          3
/DUT/core/#ublk#167905109#187/immed__192
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v(192)
                                                        0          3
/DUT/core/#ublk#167905109#187/immed__188
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v(188)
                                                        0          3
Expression Coverage:
    Enabled Coverage              Bins   Covered    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Expressions                      1         1         0   100.00%

================================Expression Details================================

Expression Coverage for instance /DUT/core --

  File E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v
----------------Focused Expression View-----------------
Line       367 Item    1  (rx_ctrl_2_regs_status_cnt_drop == ((1 << 8) - 1))
Expression totals: 1 of 1 input term covered = 100.00%

                                          Input Term   Covered  Reason for no coverage   Hint
                                         -----------  --------  -----------------------  --------------
  (rx_ctrl_2_regs_status_cnt_drop == ((1 << 8) - 1))         Y

     Rows:       Hits  FEC Target                                            Non-masking condition(s)      
 ---------  ---------  --------------------                                  -------------------------     
  Row   1:          3  (rx_ctrl_2_regs_status_cnt_drop == ((1 << 8) - 1))_0  -                             
  Row   2:          2  (rx_ctrl_2_regs_status_cnt_drop == ((1 << 8) - 1))_1  -                             


Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        706       656        50    92.91%

================================Toggle Details================================

Toggle Coverage for instance /DUT/core --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                    ctrl_2_tx_fifo_push_data[0-36]           1           1      100.00 
                         ctrl_2_tx_fifo_push_ready           1           1      100.00 
                         ctrl_2_tx_fifo_push_valid           1           1      100.00 
                                               irq           2           2      100.00 
                                         md_rx_clk           3           3      100.00 
                                  md_rx_data[0-31]           2           2      100.00 
                                         md_rx_err           2           2      100.00 
                                   md_rx_offset[0]           2           2      100.00 
                                   md_rx_offset[1]           1           1      100.00 
                                       md_rx_ready           2           2      100.00 
                                   md_rx_size[0-1]           2           2      100.00 
                                     md_rx_size[2]           1           1      100.00 
                                       md_rx_valid           2           2      100.00 
                                         md_tx_clk           3           3      100.00 
                                  md_tx_data[0-31]           1           1      100.00 
                                         md_tx_err           1           1      100.00 
                                 md_tx_offset[0-1]           1           1      100.00 
                                       md_tx_ready           1           3      100.00 
                                   md_tx_size[0-2]           1           1      100.00 
                                       md_tx_valid           1           1      100.00 
                                        paddr[0-1]           1           1      100.00 
                                        paddr[2-7]           3           3      100.00 
                                       paddr[8-15]           1           1      100.00 
                                              pclk           3           3      100.00 
                                           penable           3           3      100.00 
                                       prdata[0-4]           3           3      100.00 
                                       prdata[5-7]           2           2      100.00 
                                       prdata[8-9]           1           1      100.00 
                                     prdata[10-31]           0           0        0.00 
                                            pready           3           3      100.00 
                                          preset_n           3           3      100.00 
                                              psel           3           3      100.00 
                                           pslverr           1           1      100.00 
                                       pwdata[0-4]           3           3      100.00 
                                       pwdata[5-7]           1           1      100.00 
                                       pwdata[8-9]           3           3      100.00 
                                     pwdata[10-15]           1           1      100.00 
                                        pwdata[16]           3           3      100.00 
                                     pwdata[17-31]           1           1      100.00 
                                            pwrite           3           3      100.00 
                      regs_2_ctrl_ctrl_offset[0-1]           3           3      100.00 
                        regs_2_ctrl_ctrl_size[0-1]           3           3      100.00 
                          regs_2_ctrl_ctrl_size[2]           2           3      100.00 
                           regs_2_rx_ctrl_ctrl_clr           3           3      100.00 
               rx_ctrl_2_regs_status_cnt_drop[0-7]           2           2      100.00 
                 rx_ctrl_2_rx_fifo_push_data[0-32]           2           2      100.00 
                   rx_ctrl_2_rx_fifo_push_data[33]           1           1      100.00 
                rx_ctrl_2_rx_fifo_push_data[34-35]           2           2      100.00 
                   rx_ctrl_2_rx_fifo_push_data[36]           1           1      100.00 
                      rx_ctrl_2_rx_fifo_push_valid           1           1      100.00 
                     rx_fifo_2_ctrl_pop_data[0-36]           1           1      100.00 
                          rx_fifo_2_ctrl_pop_ready           1           1      100.00 
                          rx_fifo_2_ctrl_pop_valid           1           1      100.00 
                         rx_fifo_2_regs_fifo_empty           1           1      100.00 
                          rx_fifo_2_regs_fifo_full           0           0        0.00 
                      rx_fifo_2_regs_fifo_lvl[0-2]           1           1      100.00 
                        rx_fifo_2_regs_fifo_lvl[3]           0           0        0.00 
                       rx_fifo_2_rx_ctrl_push_full           0           0        0.00 
                      rx_fifo_2_rx_ctrl_push_ready           1           1      100.00 
                         tx_fifo_2_regs_fifo_empty           1           1      100.00 
                          tx_fifo_2_regs_fifo_full           1           1      100.00 
                      tx_fifo_2_regs_fifo_lvl[0-3]           1           1      100.00 
                  tx_fifo_2_tx_ctrl_pop_data[0-36]           1           1      100.00 
                       tx_fifo_2_tx_ctrl_pop_ready           1           1      100.00 
                       tx_fifo_2_tx_ctrl_pop_valid           1           1      100.00 

Total Node Count     =        353 
Toggled Node Count   =        328 
Untoggled Node Count =         25 

Toggle Coverage      =      92.91% (656 of 706 bins)

=================================================================================
=== Instance: /DUT
=== Design Unit: work.cfs_aligner
=================================================================================
Toggle Coverage:
    Enabled Coverage              Bins      Hits    Misses  Coverage
    ----------------              ----      ----    ------  --------
    Toggles                        336       292        44    86.90%

================================Toggle Details================================

Toggle Coverage for instance /DUT --

                                              Node      1H->0L      0L->1H  "Coverage"
                                              ---------------------------------------
                                               clk           3           3      100.00 
                                               irq           2           2      100.00 
                                  md_rx_data[0-31]           2           2      100.00 
                                         md_rx_err           2           2      100.00 
                                   md_rx_offset[0]           2           2      100.00 
                                   md_rx_offset[1]           1           1      100.00 
                                       md_rx_ready           2           2      100.00 
                                   md_rx_size[0-1]           2           2      100.00 
                                     md_rx_size[2]           1           1      100.00 
                                       md_rx_valid           2           2      100.00 
                                  md_tx_data[0-31]           1           1      100.00 
                                         md_tx_err           1           1      100.00 
                                 md_tx_offset[0-1]           1           1      100.00 
                                       md_tx_ready           1           3      100.00 
                                   md_tx_size[0-2]           1           1      100.00 
                                       md_tx_valid           1           1      100.00 
                                        paddr[0-1]           1           1      100.00 
                                        paddr[2-7]           3           3      100.00 
                                       paddr[8-15]           1           1      100.00 
                                           penable           3           3      100.00 
                                       prdata[0-4]           3           3      100.00 
                                       prdata[5-7]           2           2      100.00 
                                       prdata[8-9]           1           1      100.00 
                                     prdata[10-31]           0           0        0.00 
                                            pready           3           3      100.00 
                                              psel           3           3      100.00 
                                           pslverr           1           1      100.00 
                                       pwdata[0-4]           3           3      100.00 
                                       pwdata[5-7]           1           1      100.00 
                                       pwdata[8-9]           3           3      100.00 
                                     pwdata[10-15]           1           1      100.00 
                                        pwdata[16]           3           3      100.00 
                                     pwdata[17-31]           1           1      100.00 
                                            pwrite           3           3      100.00 
                                           reset_n           3           3      100.00 

Total Node Count     =        168 
Toggled Node Count   =        146 
Untoggled Node Count =         22 

Toggle Coverage      =      86.90% (292 of 336 bins)


ASSERTION RESULTS:
--------------------------------------------------------------------
Name                 File(Line)                   Failure      Pass 
                                                  Count        Count
--------------------------------------------------------------------
/DUT/core/#ublk#167905109#187/immed__196
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v(196)
                                                        0          3
/DUT/core/#ublk#167905109#187/immed__192
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v(192)
                                                        0          3
/DUT/core/#ublk#167905109#187/immed__188
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_aligner_core.v(188)
                                                        0          3
/DUT/core/rx_fifo/#ublk#72574239#54/immed__59
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(59)
                                                        0          3
/DUT/core/rx_fifo/#ublk#72574239#54/immed__55
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(55)
                                                        0          3
/DUT/core/tx_fifo/#ublk#72574239#54/immed__59
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(59)
                                                        0          3
/DUT/core/tx_fifo/#ublk#72574239#54/immed__55
                     E:/K.O/Self-learning/CFS_Aligner/UVM_Environment/5th/aligner/Design/cfs_synch_fifo.v(55)
                                                        0          3

Total Coverage By Instance (filtered view): 82.58%

