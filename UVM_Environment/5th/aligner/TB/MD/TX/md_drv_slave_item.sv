/////////////////////////////////////////////////////////////////////////////// 
// File:        md_drv_slave_item.sv 
// Author:      Ahmed Awad-Allah Mohamed 
// Date:        2025-09-02 
// Description: Master driver transaction item. 
//              Represents a transaction generated by the master driver to be 
//              driven onto the DUT interface. This object contains randomized 
//              fields such as pre/post drive delays, the data payload, and its 
//              offset. Constraints ensure realistic and bounded values. 
///////////////////////////////////////////////////////////////////////////////  

`ifndef MD_DRV_SLAVE_ITEM
`define MD_DRV_SLAVE_ITEM

//------------------------------------------------------------------------------
// Class: md_drv_slave_item
//------------------------------------------------------------------------------
// - Extends md_drv_item (base driver transaction).
// - Defines fields that represent a master transaction (delays, data, offset).
// - Contains constraints for default/random behavior.
// - Provides a string conversion function for debug/logging.
//------------------------------------------------------------------------------
class md_drv_slave_item extends md_drv_item;
	
	/*-------------------------------------------------------------------------------
	-- Interface, port, fields, constraints
	-------------------------------------------------------------------------------*/
	
	//Length, in clock cycles, of the item - this controls after how many cycles the "ready" signal will be high.
    //A value of 0 means that the MD item will be one clock cycle long.
    rand int unsigned length;

    //Response
    rand md_response response;
    
    //Value of 'ready' signal at the end of the MD item
    rand bit ready_at_end;



	// string only_data;

    constraint length_default {
      soft length <= 5;
      soft length >  0;
    }

	/*-------------------------------------------------------------------------------
	-- UVM Factory registration
	-------------------------------------------------------------------------------*/
	// Registers this class with UVM factory for object creation
	`uvm_object_utils(md_drv_slave_item)
	
	/*-------------------------------------------------------------------------------
	-- Functions
	-------------------------------------------------------------------------------*/
	
	// Constructor
	function new(string name = "md_drv_slave_item");
		super.new(name);
	endfunction : new


	virtual function void do_record(uvm_recorder recorder);
      super.do_record(recorder);
      recorder.record_field("ready_at_end", ready_at_end, $bits(ready_at_end));
      recorder.record_field("length", length, $bits(length));
      recorder.record_string("response", response.name());
    endfunction

	// Convert object contents to string (for debug/printing)
	virtual function string convert2string();
		string data_as_string = "{";

		// // Build string of all data bytes
		// foreach (data[idx]) begin
		// 	data_as_string = $sformatf("%0s'h%02x%0s", 
		// 		data_as_string, 
		// 		data[idx], 
		// 		(idx == data.size()-1 ? "}" : ", "));
		// end

		// only_data = data_as_string;

		// data_as_string = $sformatf("%0s}", data_as_string);

		data_as_string = $sformatf(
			"\n\n\t\t\t\t------> ready_at_end: %0b, length: %0d, response: %0s <-----\n\n\n\n",
			ready_at_end, length, response.name());

		// Print all fields in formatted string
		return $sformatf("%0s\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
			,data_as_string);
	endfunction : convert2string
	
endclass : md_drv_slave_item

`endif
