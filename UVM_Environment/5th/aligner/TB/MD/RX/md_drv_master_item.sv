/////////////////////////////////////////////////////////////////////////////// 
// File:        md_drv_master_item.sv 
// Author:      Ahmed Awad-Allah Mohamed 
// Date:        2025-09-02 
// Description: Master driver transaction item. 
//              Represents a transaction generated by the master driver to be 
//              driven onto the DUT interface. This object contains randomized 
//              fields such as pre/post drive delays, the data payload, and its 
//              offset. Constraints ensure realistic and bounded values. 
///////////////////////////////////////////////////////////////////////////////  

`ifndef MD_DRV_MASTER_ITEM
`define MD_DRV_MASTER_ITEM

//------------------------------------------------------------------------------
// Class: md_drv_master_item
//------------------------------------------------------------------------------
// - Extends md_drv_item (base driver transaction).
// - Defines fields that represent a master transaction (delays, data, offset).
// - Contains constraints for default/random behavior.
// - Provides a string conversion function for debug/logging.
//------------------------------------------------------------------------------
class md_drv_master_item extends md_drv_item;
	
	/*-------------------------------------------------------------------------------
	-- Interface, port, fields, constraints
	-------------------------------------------------------------------------------*/
	
	// Randomizable delay before driving the data
	rand int unsigned pre_drive_delay;

	// Randomizable delay after driving the data
	rand int unsigned post_drive_delay;

	// Data payload driven by the master (dynamic array of bytes)
	rand bit[7:0] data[$];

	// Offset of the data (used for alignment/positioning in protocol)
	rand int unsigned offset;

	string only_data;

	//-----------------------------
	// Constraints
	//-----------------------------

	// Default constraint: pre_drive_delay up to 5
	constraint pre_drive_delay_default {
		soft pre_drive_delay <= 5;
		soft pre_drive_delay > 0;
	}

	// Default constraint: post_drive_delay up to 5
	constraint post_drive_delay_default {
		soft post_drive_delay <= 5;
		soft post_drive_delay > 0;
	}

	// Default constraint: size of data between 1 and 2 bytes
	constraint data_default {
		soft data.size() >= 1;
		soft data.size() <  5;
	}

	// Hard constraint: data must not be empty
	constraint data_hard {
		data.size() > 0;
	}

	// Default constraint: offset = 0 unless overridden
	constraint offset_default {
		offset == 0;
	}
	
	/*-------------------------------------------------------------------------------
	-- UVM Factory registration
	-------------------------------------------------------------------------------*/
	// Registers this class with UVM factory for object creation
	`uvm_object_utils(md_drv_master_item)
	
	/*-------------------------------------------------------------------------------
	-- Functions
	-------------------------------------------------------------------------------*/
	
	// Constructor
	function new(string name = "md_drv_master_item");
		super.new(name);
	endfunction : new


	virtual function void do_record(uvm_recorder recorder);
      super.do_record(recorder);
      recorder.record_string("data", only_data);
      recorder.record_field("size", data.size(), $bits(data.size()));
      recorder.record_field("offset", offset, $bits(offset));
      recorder.record_field("pre_drive_delay", pre_drive_delay, $bits(pre_drive_delay));
      recorder.record_field("post_drive_delay", post_drive_delay, $bits(post_drive_delay));
    endfunction

	// Convert object contents to string (for debug/printing)
	virtual function string convert2string();
		string data_as_string = "{";

		// Build string of all data bytes
		foreach (data[idx]) begin
			data_as_string = $sformatf("%0s'h%02x%0s", 
				data_as_string, 
				data[idx], 
				(idx == data.size()-1 ? "}" : ", "));
		end

		only_data = data_as_string;

		// data_as_string = $sformatf("%0s}", data_as_string);

		data_as_string = $sformatf(
			"\n\n\t\t\t\t------> data: %0s, offset: %0d, pre_drive_delay: %0d, post_drive_delay: %0d <-----\n\n\n\n",
			data_as_string, offset, pre_drive_delay, post_drive_delay);

		// Print all fields in formatted string
		return $sformatf("%0s\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
			,data_as_string);
	endfunction : convert2string
	
endclass : md_drv_master_item

`endif
